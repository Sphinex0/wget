<!DOCTYPE html>
<html class="client-nojs vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-page-tools-pinned-disabled vector-feature-toc-pinned-clientpref-1 vector-feature-main-menu-pinned-disabled vector-feature-limited-width-clientpref-1 vector-feature-limited-width-content-enabled vector-feature-custom-font-size-clientpref-1 vector-feature-appearance-pinned-clientpref-1 vector-feature-night-mode-enabled skin-theme-clientpref-day vector-sticky-header-enabled vector-toc-available" lang="en" dir="ltr">
<head>
<meta charset="UTF-8">
<title>Evaluation strategy - Wikipedia</title>
<script>(function(){var className="client-js vector-feature-language-in-header-enabled vector-feature-language-in-main-page-header-disabled vector-feature-page-tools-pinned-disabled vector-feature-toc-pinned-clientpref-1 vector-feature-main-menu-pinned-disabled vector-feature-limited-width-clientpref-1 vector-feature-limited-width-content-enabled vector-feature-custom-font-size-clientpref-1 vector-feature-appearance-pinned-clientpref-1 vector-feature-night-mode-enabled skin-theme-clientpref-day vector-sticky-header-enabled vector-toc-available";var cookie=document.cookie.match(/(?:^|; )enwikimwclientpreferences=([^;]+)/);if(cookie){cookie[1].split('%2C').forEach(function(pref){className=className.replace(new RegExp('(^| )'+pref.replace(/-clientpref-\w+$|[^\w-]+/g,'')+'-clientpref-\\w+( |$)'),'$1'+pref+'$2');});}document.documentElement.className=className;}());RLCONF={"wgBreakFrames":false,"wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgRequestId":"529abf5f-faaf-4326-a975-e422199e5372","wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Evaluation_strategy","wgTitle":"Evaluation strategy","wgCurRevisionId":1294288936,"wgRevisionId":1294288936,"wgArticleId":2977119,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":["Articles with short description","Short description is different from Wikidata","Articles lacking in-text citations from April 2012","All articles lacking in-text citations","CS1 errors: periodical ignored","Articles with example Python (programming language) code","Evaluation strategy"],"wgPageViewLanguage":"en","wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgRelevantPageName":"Evaluation_strategy","wgRelevantArticleId":2977119,"wgIsProbablyEditable":true,"wgRelevantPageIsProbablyEditable":true,"wgRestrictionEdit":[],"wgRestrictionMove":[],"wgRedirectedFrom":"Call-by-need","wgNoticeProject":"wikipedia","wgCiteReferencePreviewsActive":false,"wgFlaggedRevsParams":{"tags":{"status":{"levels":1}}},"wgMediaViewerOnClick":true,"wgMediaViewerEnabledByDefault":true,"wgPopupsFlags":0,"wgVisualEditor":{"pageLanguageCode":"en","pageLanguageDir":"ltr","pageVariantFallbacks":"en"},"wgMFDisplayWikibaseDescriptions":{"search":true,"watchlist":true,"tagline":false,"nearby":true},"wgWMESchemaEditAttemptStepOversample":false,"wgWMEPageLength":50000,"wgMetricsPlatformUserExperiments":{"active_experiments":[],"overrides":[],"enrolled":[],"assigned":[],"subject_ids":[],"sampling_units":[]},"wgInternalRedirectTargetUrl":"/wiki/Evaluation_strategy#Call_by_need","wgEditSubmitButtonLabelPublish":true,"wgULSPosition":"interlanguage","wgULSisCompactLinksEnabled":false,"wgVector2022LanguageInHeader":true,"wgULSisLanguageSelectorEmpty":false,"wgWikibaseItemId":"Q2881121","wgCheckUserClientHintsHeadersJsApi":["brands","architecture","bitness","fullVersionList","mobile","model","platform","platformVersion"],"GEHomepageSuggestedEditsEnableTopics":true,"wgGESuggestedEditsTaskTypes":{"taskTypes":["copyedit","link-recommendation"],"unavailableTaskTypes":[]},"wgGETopicsMatchModeEnabled":false,"wgGELevelingUpEnabledForUser":false};
RLSTATE={"ext.globalCssJs.user.styles":"ready","site.styles":"ready","user.styles":"ready","ext.globalCssJs.user":"ready","user":"ready","user.options":"loading","ext.cite.styles":"ready","ext.pygments":"ready","skins.vector.search.codex.styles":"ready","skins.vector.styles":"ready","skins.vector.icons":"ready","ext.wikimediamessages.styles":"ready","ext.visualEditor.desktopArticleTarget.noscript":"ready","ext.uls.interlanguage":"ready","wikibase.client.init":"ready"};RLPAGEMODULES=["ext.xLab","mediawiki.action.view.redirect","ext.cite.ux-enhancements","ext.pygments.view","site","mediawiki.page.ready","mediawiki.toc","skins.vector.js","ext.centralNotice.geoIP","ext.centralNotice.startUp","ext.gadget.ReferenceTooltips","ext.gadget.switcher","ext.urlShortener.toolbar","ext.centralauth.centralautologin","mmv.bootstrap","ext.popups","ext.visualEditor.desktopArticleTarget.init","ext.visualEditor.targetLoader","ext.echo.centralauth","ext.eventLogging","ext.wikimediaEvents","ext.navigationTiming","ext.uls.interface","ext.cx.eventlogging.campaigns","ext.cx.uls.quick.actions","wikibase.client.vector-2022","ext.checkUser.clientHints","ext.quicksurveys.init","ext.growthExperiments.SuggestedEditSession"];</script>
<script>(RLQ=window.RLQ||[]).push(function(){mw.loader.impl(function(){return["user.options@12s5i",function($,jQuery,require,module){mw.user.tokens.set({"patrolToken":"+\\","watchToken":"+\\","csrfToken":"+\\"});
}];});});</script>
<link rel="stylesheet" href="/w/load.php?lang=en&amp;modules=ext.cite.styles%7Cext.pygments%7Cext.uls.interlanguage%7Cext.visualEditor.desktopArticleTarget.noscript%7Cext.wikimediamessages.styles%7Cskins.vector.icons%2Cstyles%7Cskins.vector.search.codex.styles%7Cwikibase.client.init&amp;only=styles&amp;skin=vector-2022">
<script async="" src="/w/load.php?lang=en&amp;modules=startup&amp;only=scripts&amp;raw=1&amp;skin=vector-2022"></script>
<meta name="ResourceLoaderDynamicStyles" content="">
<link rel="stylesheet" href="/w/load.php?lang=en&amp;modules=site.styles&amp;only=styles&amp;skin=vector-2022">
<meta name="generator" content="MediaWiki 1.45.0-wmf.12">
<meta name="referrer" content="origin">
<meta name="referrer" content="origin-when-cross-origin">
<meta name="robots" content="max-image-preview:standard">
<meta name="format-detection" content="telephone=no">
<meta name="viewport" content="width=1120">
<meta property="og:title" content="Evaluation strategy - Wikipedia">
<meta property="og:type" content="website">
<link rel="preconnect" href="//upload.wikimedia.org">
<link rel="alternate" media="only screen and (max-width: 640px)" href="//en.m.wikipedia.org/wiki/Evaluation_strategy#Call_by_need">
<link rel="alternate" type="application/x-wiki" title="Edit this page" href="/w/index.php?title=Evaluation_strategy&amp;action=edit">
<link rel="apple-touch-icon" href="/static/apple-touch/wikipedia.png">
<link rel="icon" href="/static/favicon/wikipedia.ico">
<link rel="search" type="application/opensearchdescription+xml" href="/w/rest.php/v1/search" title="Wikipedia (en)">
<link rel="EditURI" type="application/rsd+xml" href="//en.wikipedia.org/w/api.php?action=rsd">
<link rel="canonical" href="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_need">
<link rel="license" href="https://creativecommons.org/licenses/by-sa/4.0/deed.en">
<link rel="alternate" type="application/atom+xml" title="Wikipedia Atom feed" href="/w/index.php?title=Special:RecentChanges&amp;feed=atom">
<link rel="dns-prefetch" href="//meta.wikimedia.org" />
<link rel="dns-prefetch" href="auth.wikimedia.org">
</head>
<body class="skin--responsive skin-vector skin-vector-search-vue mediawiki ltr sitedir-ltr mw-hide-empty-elt ns-0 ns-subject mw-editable page-Evaluation_strategy rootpage-Evaluation_strategy skin-vector-2022 action-view"><a class="mw-jump-link" href="#bodyContent">Jump to content</a>
<div class="vector-header-container">
	<header class="vector-header mw-header no-font-mode-scale">
		<div class="vector-header-start">
			<nav class="vector-main-menu-landmark" aria-label="Site">
				
<div id="vector-main-menu-dropdown" class="vector-dropdown vector-main-menu-dropdown vector-button-flush-left vector-button-flush-right"  title="Main menu" >
	<input type="checkbox" id="vector-main-menu-dropdown-checkbox" role="button" aria-haspopup="true" data-event-name="ui.dropdown-vector-main-menu-dropdown" class="vector-dropdown-checkbox "  aria-label="Main menu"  >
	<label id="vector-main-menu-dropdown-label" for="vector-main-menu-dropdown-checkbox" class="vector-dropdown-label cdx-button cdx-button--fake-button cdx-button--fake-button--enabled cdx-button--weight-quiet cdx-button--icon-only " aria-hidden="true"  ><span class="vector-icon mw-ui-icon-menu mw-ui-icon-wikimedia-menu"></span>

<span class="vector-dropdown-label-text">Main menu</span>
	</label>
	<div class="vector-dropdown-content">


				<div id="vector-main-menu-unpinned-container" class="vector-unpinned-container">
		
<div id="vector-main-menu" class="vector-main-menu vector-pinnable-element">
	<div
	class="vector-pinnable-header vector-main-menu-pinnable-header vector-pinnable-header-unpinned"
	data-feature-name="main-menu-pinned"
	data-pinnable-element-id="vector-main-menu"
	data-pinned-container-id="vector-main-menu-pinned-container"
	data-unpinned-container-id="vector-main-menu-unpinned-container"
>
	<div class="vector-pinnable-header-label">Main menu</div>
	<button class="vector-pinnable-header-toggle-button vector-pinnable-header-pin-button" data-event-name="pinnable-header.vector-main-menu.pin">move to sidebar</button>
	<button class="vector-pinnable-header-toggle-button vector-pinnable-header-unpin-button" data-event-name="pinnable-header.vector-main-menu.unpin">hide</button>
</div>

	
<div id="p-navigation" class="vector-menu mw-portlet mw-portlet-navigation"  >
	<div class="vector-menu-heading">
		Navigation
	</div>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list">
			
			<li id="n-mainpage-description" class="mw-list-item"><a href="/wiki/Main_Page" title="Visit the main page [z]" accesskey="z"><span>Main page</span></a></li><li id="n-contents" class="mw-list-item"><a href="/wiki/Wikipedia:Contents" title="Guides to browsing Wikipedia"><span>Contents</span></a></li><li id="n-currentevents" class="mw-list-item"><a href="/wiki/Portal:Current_events" title="Articles related to current events"><span>Current events</span></a></li><li id="n-randompage" class="mw-list-item"><a href="/wiki/Special:Random" title="Visit a randomly selected article [x]" accesskey="x"><span>Random article</span></a></li><li id="n-aboutsite" class="mw-list-item"><a href="/wiki/Wikipedia:About" title="Learn about Wikipedia and how it works"><span>About Wikipedia</span></a></li><li id="n-contactpage" class="mw-list-item"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us" title="How to contact Wikipedia"><span>Contact us</span></a></li>
		</ul>
		
	</div>
</div>

	
	
<div id="p-interaction" class="vector-menu mw-portlet mw-portlet-interaction"  >
	<div class="vector-menu-heading">
		Contribute
	</div>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list">
			
			<li id="n-help" class="mw-list-item"><a href="/wiki/Help:Contents" title="Guidance on how to use and edit Wikipedia"><span>Help</span></a></li><li id="n-introduction" class="mw-list-item"><a href="/wiki/Help:Introduction" title="Learn how to edit Wikipedia"><span>Learn to edit</span></a></li><li id="n-portal" class="mw-list-item"><a href="/wiki/Wikipedia:Community_portal" title="The hub for editors"><span>Community portal</span></a></li><li id="n-recentchanges" class="mw-list-item"><a href="/wiki/Special:RecentChanges" title="A list of recent changes to Wikipedia [r]" accesskey="r"><span>Recent changes</span></a></li><li id="n-upload" class="mw-list-item"><a href="/wiki/Wikipedia:File_upload_wizard" title="Add images or other media for use on Wikipedia"><span>Upload file</span></a></li><li id="n-specialpages" class="mw-list-item"><a href="/wiki/Special:SpecialPages"><span>Special pages</span></a></li>
		</ul>
		
	</div>
</div>

</div>

				</div>

	</div>
</div>

		</nav>
			
<a href="/wiki/Main_Page" class="mw-logo">
	<img class="mw-logo-icon" src="/static/images/icons/wikipedia.png" alt="" aria-hidden="true" height="50" width="50">
	<span class="mw-logo-container skin-invert">
		<img class="mw-logo-wordmark" alt="Wikipedia" src="/static/images/mobile/copyright/wikipedia-wordmark-en.svg" style="width: 7.5em; height: 1.125em;">
		<img class="mw-logo-tagline" alt="The Free Encyclopedia" src="/static/images/mobile/copyright/wikipedia-tagline-en.svg" width="117" height="13" style="width: 7.3125em; height: 0.8125em;">
	</span>
</a>

		</div>
		<div class="vector-header-end">
			
<div id="p-search" role="search" class="vector-search-box-vue  vector-search-box-collapses vector-search-box-show-thumbnail vector-search-box-auto-expand-width vector-search-box">
	<a href="/wiki/Special:Search" class="cdx-button cdx-button--fake-button cdx-button--fake-button--enabled cdx-button--weight-quiet cdx-button--icon-only search-toggle" title="Search Wikipedia [f]" accesskey="f"><span class="vector-icon mw-ui-icon-search mw-ui-icon-wikimedia-search"></span>

<span>Search</span>
	</a>
	<div class="vector-typeahead-search-container">
		<div class="cdx-typeahead-search cdx-typeahead-search--show-thumbnail cdx-typeahead-search--auto-expand-width">
			<form action="/w/index.php" id="searchform" class="cdx-search-input cdx-search-input--has-end-button">
				<div id="simpleSearch" class="cdx-search-input__input-wrapper"  data-search-loc="header-moved">
					<div class="cdx-text-input cdx-text-input--has-start-icon">
						<input
							class="cdx-text-input__input mw-searchInput" autocomplete="off"
							 type="search" name="search" placeholder="Search Wikipedia" aria-label="Search Wikipedia" autocapitalize="sentences" spellcheck="false" title="Search Wikipedia [f]" accesskey="f" id="searchInput"
							>
						<span class="cdx-text-input__icon cdx-text-input__start-icon"></span>
					</div>
					<input type="hidden" name="title" value="Special:Search">
				</div>
				<button class="cdx-button cdx-search-input__end-button">Search</button>
			</form>
		</div>
	</div>
</div>

			<nav class="vector-user-links vector-user-links-wide" aria-label="Personal tools">
	<div class="vector-user-links-main">
	
<div id="p-vector-user-menu-preferences" class="vector-menu mw-portlet emptyPortlet"  >
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list">
			
			
		</ul>
		
	</div>
</div>

	
<div id="p-vector-user-menu-userpage" class="vector-menu mw-portlet emptyPortlet"  >
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list">
			
			
		</ul>
		
	</div>
</div>

	<nav class="vector-appearance-landmark" aria-label="Appearance">
		
<div id="vector-appearance-dropdown" class="vector-dropdown "  title="Change the appearance of the page&#039;s font size, width, and color" >
	<input type="checkbox" id="vector-appearance-dropdown-checkbox" role="button" aria-haspopup="true" data-event-name="ui.dropdown-vector-appearance-dropdown" class="vector-dropdown-checkbox "  aria-label="Appearance"  >
	<label id="vector-appearance-dropdown-label" for="vector-appearance-dropdown-checkbox" class="vector-dropdown-label cdx-button cdx-button--fake-button cdx-button--fake-button--enabled cdx-button--weight-quiet cdx-button--icon-only " aria-hidden="true"  ><span class="vector-icon mw-ui-icon-appearance mw-ui-icon-wikimedia-appearance"></span>

<span class="vector-dropdown-label-text">Appearance</span>
	</label>
	<div class="vector-dropdown-content">


			<div id="vector-appearance-unpinned-container" class="vector-unpinned-container">
				
			</div>
		
	</div>
</div>

	</nav>
	
<div id="p-vector-user-menu-notifications" class="vector-menu mw-portlet emptyPortlet"  >
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list">
			
			
		</ul>
		
	</div>
</div>

	
<div id="p-vector-user-menu-overflow" class="vector-menu mw-portlet"  >
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list">
			<li id="pt-sitesupport-2" class="user-links-collapsible-item mw-list-item user-links-collapsible-item"><a data-mw="interface" href="https://donate.wikimedia.org/?wmf_source=donate&amp;wmf_medium=sidebar&amp;wmf_campaign=en.wikipedia.org&amp;uselang=en" class=""><span>Donate</span></a>
</li>
<li id="pt-createaccount-2" class="user-links-collapsible-item mw-list-item user-links-collapsible-item"><a data-mw="interface" href="/w/index.php?title=Special:CreateAccount&amp;returnto=Evaluation+strategy" title="You are encouraged to create an account and log in; however, it is not mandatory" class=""><span>Create account</span></a>
</li>
<li id="pt-login-2" class="user-links-collapsible-item mw-list-item user-links-collapsible-item"><a data-mw="interface" href="/w/index.php?title=Special:UserLogin&amp;returnto=Evaluation+strategy" title="You&#039;re encouraged to log in; however, it&#039;s not mandatory. [o]" accesskey="o" class=""><span>Log in</span></a>
</li>

			
		</ul>
		
	</div>
</div>

	</div>
	
<div id="vector-user-links-dropdown" class="vector-dropdown vector-user-menu vector-button-flush-right vector-user-menu-logged-out"  title="Log in and more options" >
	<input type="checkbox" id="vector-user-links-dropdown-checkbox" role="button" aria-haspopup="true" data-event-name="ui.dropdown-vector-user-links-dropdown" class="vector-dropdown-checkbox "  aria-label="Personal tools"  >
	<label id="vector-user-links-dropdown-label" for="vector-user-links-dropdown-checkbox" class="vector-dropdown-label cdx-button cdx-button--fake-button cdx-button--fake-button--enabled cdx-button--weight-quiet cdx-button--icon-only " aria-hidden="true"  ><span class="vector-icon mw-ui-icon-ellipsis mw-ui-icon-wikimedia-ellipsis"></span>

<span class="vector-dropdown-label-text">Personal tools</span>
	</label>
	<div class="vector-dropdown-content">


		
<div id="p-personal" class="vector-menu mw-portlet mw-portlet-personal user-links-collapsible-item"  title="User menu" >
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list">
			
			<li id="pt-sitesupport" class="user-links-collapsible-item mw-list-item"><a href="https://donate.wikimedia.org/?wmf_source=donate&amp;wmf_medium=sidebar&amp;wmf_campaign=en.wikipedia.org&amp;uselang=en"><span>Donate</span></a></li><li id="pt-createaccount" class="user-links-collapsible-item mw-list-item"><a href="/w/index.php?title=Special:CreateAccount&amp;returnto=Evaluation+strategy" title="You are encouraged to create an account and log in; however, it is not mandatory"><span class="vector-icon mw-ui-icon-userAdd mw-ui-icon-wikimedia-userAdd"></span> <span>Create account</span></a></li><li id="pt-login" class="user-links-collapsible-item mw-list-item"><a href="/w/index.php?title=Special:UserLogin&amp;returnto=Evaluation+strategy" title="You&#039;re encouraged to log in; however, it&#039;s not mandatory. [o]" accesskey="o"><span class="vector-icon mw-ui-icon-logIn mw-ui-icon-wikimedia-logIn"></span> <span>Log in</span></a></li>
		</ul>
		
	</div>
</div>

<div id="p-user-menu-anon-editor" class="vector-menu mw-portlet mw-portlet-user-menu-anon-editor"  >
	<div class="vector-menu-heading">
		Pages for logged out editors <a href="/wiki/Help:Introduction" aria-label="Learn more about editing"><span>learn more</span></a>
	</div>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list">
			
			<li id="pt-anoncontribs" class="mw-list-item"><a href="/wiki/Special:MyContributions" title="A list of edits made from this IP address [y]" accesskey="y"><span>Contributions</span></a></li><li id="pt-anontalk" class="mw-list-item"><a href="/wiki/Special:MyTalk" title="Discussion about edits from this IP address [n]" accesskey="n"><span>Talk</span></a></li>
		</ul>
		
	</div>
</div>

	
	</div>
</div>

</nav>

		</div>
	</header>
</div>
<div class="mw-page-container">
	<div class="mw-page-container-inner">
		<div class="vector-sitenotice-container">
			<div id="siteNotice"><!-- CentralNotice --></div>
		</div>
		<div class="vector-column-start">
			<div class="vector-main-menu-container">
		<div id="mw-navigation">
			<nav id="mw-panel" class="vector-main-menu-landmark" aria-label="Site">
				<div id="vector-main-menu-pinned-container" class="vector-pinned-container">
				
				</div>
		</nav>
		</div>
	</div>
	<div class="vector-sticky-pinned-container">
				<nav id="mw-panel-toc" aria-label="Contents" data-event-name="ui.sidebar-toc" class="mw-table-of-contents-container vector-toc-landmark">
					<div id="vector-toc-pinned-container" class="vector-pinned-container">
					<div id="vector-toc" class="vector-toc vector-pinnable-element">
	<div
	class="vector-pinnable-header vector-toc-pinnable-header vector-pinnable-header-pinned"
	data-feature-name="toc-pinned"
	data-pinnable-element-id="vector-toc"
	
	
>
	<h2 class="vector-pinnable-header-label">Contents</h2>
	<button class="vector-pinnable-header-toggle-button vector-pinnable-header-pin-button" data-event-name="pinnable-header.vector-toc.pin">move to sidebar</button>
	<button class="vector-pinnable-header-toggle-button vector-pinnable-header-unpin-button" data-event-name="pinnable-header.vector-toc.unpin">hide</button>
</div>


	<ul class="vector-toc-contents" id="mw-panel-toc-list">
		<li id="toc-mw-content-text"
			class="vector-toc-list-item vector-toc-level-1">
			<a href="#" class="vector-toc-link">
				<div class="vector-toc-text">(Top)</div>
			</a>
		</li>
		<li id="toc-Example"
		class="vector-toc-list-item vector-toc-level-1 vector-toc-list-item-expanded">
		<a class="vector-toc-link" href="#Example">
			<div class="vector-toc-text">
				<span class="vector-toc-numb">1</span>
				<span>Example</span>
			</div>
		</a>
		
		<ul id="toc-Example-sublist" class="vector-toc-list">
		</ul>
	</li>
	<li id="toc-Table"
		class="vector-toc-list-item vector-toc-level-1 vector-toc-list-item-expanded">
		<a class="vector-toc-link" href="#Table">
			<div class="vector-toc-text">
				<span class="vector-toc-numb">2</span>
				<span>Table</span>
			</div>
		</a>
		
		<ul id="toc-Table-sublist" class="vector-toc-list">
		</ul>
	</li>
	<li id="toc-Evaluation_orders"
		class="vector-toc-list-item vector-toc-level-1 vector-toc-list-item-expanded">
		<a class="vector-toc-link" href="#Evaluation_orders">
			<div class="vector-toc-text">
				<span class="vector-toc-numb">3</span>
				<span>Evaluation orders</span>
			</div>
		</a>
		
			<button aria-controls="toc-Evaluation_orders-sublist" class="cdx-button cdx-button--weight-quiet cdx-button--icon-only vector-toc-toggle">
				<span class="vector-icon mw-ui-icon-wikimedia-expand"></span>
				<span>Toggle Evaluation orders subsection</span>
			</button>
		
		<ul id="toc-Evaluation_orders-sublist" class="vector-toc-list">
			<li id="toc-Strict_evaluation"
			class="vector-toc-list-item vector-toc-level-2">
			<a class="vector-toc-link" href="#Strict_evaluation">
				<div class="vector-toc-text">
					<span class="vector-toc-numb">3.1</span>
					<span>Strict evaluation</span>
				</div>
			</a>
			
			<ul id="toc-Strict_evaluation-sublist" class="vector-toc-list">
			</ul>
		</li>
		<li id="toc-Non-strict_evaluation"
			class="vector-toc-list-item vector-toc-level-2">
			<a class="vector-toc-link" href="#Non-strict_evaluation">
				<div class="vector-toc-text">
					<span class="vector-toc-numb">3.2</span>
					<span>Non-strict evaluation</span>
				</div>
			</a>
			
			<ul id="toc-Non-strict_evaluation-sublist" class="vector-toc-list">
			</ul>
		</li>
		<li id="toc-Comparison_of_applicative_order_and_normal_order_evaluation"
			class="vector-toc-list-item vector-toc-level-2">
			<a class="vector-toc-link" href="#Comparison_of_applicative_order_and_normal_order_evaluation">
				<div class="vector-toc-text">
					<span class="vector-toc-numb">3.3</span>
					<span>Comparison of applicative order and normal order evaluation</span>
				</div>
			</a>
			
			<ul id="toc-Comparison_of_applicative_order_and_normal_order_evaluation-sublist" class="vector-toc-list">
			</ul>
		</li>
	</ul>
	</li>
	<li id="toc-Strict_binding_strategies"
		class="vector-toc-list-item vector-toc-level-1 vector-toc-list-item-expanded">
		<a class="vector-toc-link" href="#Strict_binding_strategies">
			<div class="vector-toc-text">
				<span class="vector-toc-numb">4</span>
				<span>Strict binding strategies</span>
			</div>
		</a>
		
			<button aria-controls="toc-Strict_binding_strategies-sublist" class="cdx-button cdx-button--weight-quiet cdx-button--icon-only vector-toc-toggle">
				<span class="vector-icon mw-ui-icon-wikimedia-expand"></span>
				<span>Toggle Strict binding strategies subsection</span>
			</button>
		
		<ul id="toc-Strict_binding_strategies-sublist" class="vector-toc-list">
			<li id="toc-Call_by_value"
			class="vector-toc-list-item vector-toc-level-2">
			<a class="vector-toc-link" href="#Call_by_value">
				<div class="vector-toc-text">
					<span class="vector-toc-numb">4.1</span>
					<span>Call by value</span>
				</div>
			</a>
			
			<ul id="toc-Call_by_value-sublist" class="vector-toc-list">
				<li id="toc-Semantic_drift"
			class="vector-toc-list-item vector-toc-level-3">
			<a class="vector-toc-link" href="#Semantic_drift">
				<div class="vector-toc-text">
					<span class="vector-toc-numb">4.1.1</span>
					<span>Semantic drift</span>
				</div>
			</a>
			
			<ul id="toc-Semantic_drift-sublist" class="vector-toc-list">
			</ul>
		</li>
	</ul>
		</li>
		<li id="toc-Call_by_reference"
			class="vector-toc-list-item vector-toc-level-2">
			<a class="vector-toc-link" href="#Call_by_reference">
				<div class="vector-toc-text">
					<span class="vector-toc-numb">4.2</span>
					<span>Call by reference</span>
				</div>
			</a>
			
			<ul id="toc-Call_by_reference-sublist" class="vector-toc-list">
			</ul>
		</li>
		<li id="toc-Call_by_copy-restore"
			class="vector-toc-list-item vector-toc-level-2">
			<a class="vector-toc-link" href="#Call_by_copy-restore">
				<div class="vector-toc-text">
					<span class="vector-toc-numb">4.3</span>
					<span>Call by copy-restore</span>
				</div>
			</a>
			
			<ul id="toc-Call_by_copy-restore-sublist" class="vector-toc-list">
			</ul>
		</li>
		<li id="toc-Call_by_sharing"
			class="vector-toc-list-item vector-toc-level-2">
			<a class="vector-toc-link" href="#Call_by_sharing">
				<div class="vector-toc-text">
					<span class="vector-toc-numb">4.4</span>
					<span>Call by sharing</span>
				</div>
			</a>
			
			<ul id="toc-Call_by_sharing-sublist" class="vector-toc-list">
			</ul>
		</li>
		<li id="toc-Call_by_address"
			class="vector-toc-list-item vector-toc-level-2">
			<a class="vector-toc-link" href="#Call_by_address">
				<div class="vector-toc-text">
					<span class="vector-toc-numb">4.5</span>
					<span>Call by address</span>
				</div>
			</a>
			
			<ul id="toc-Call_by_address-sublist" class="vector-toc-list">
			</ul>
		</li>
		<li id="toc-Call_by_unification"
			class="vector-toc-list-item vector-toc-level-2">
			<a class="vector-toc-link" href="#Call_by_unification">
				<div class="vector-toc-text">
					<span class="vector-toc-numb">4.6</span>
					<span>Call by unification</span>
				</div>
			</a>
			
			<ul id="toc-Call_by_unification-sublist" class="vector-toc-list">
			</ul>
		</li>
	</ul>
	</li>
	<li id="toc-Non-strict_binding_strategies"
		class="vector-toc-list-item vector-toc-level-1 vector-toc-list-item-expanded">
		<a class="vector-toc-link" href="#Non-strict_binding_strategies">
			<div class="vector-toc-text">
				<span class="vector-toc-numb">5</span>
				<span>Non-strict binding strategies</span>
			</div>
		</a>
		
			<button aria-controls="toc-Non-strict_binding_strategies-sublist" class="cdx-button cdx-button--weight-quiet cdx-button--icon-only vector-toc-toggle">
				<span class="vector-icon mw-ui-icon-wikimedia-expand"></span>
				<span>Toggle Non-strict binding strategies subsection</span>
			</button>
		
		<ul id="toc-Non-strict_binding_strategies-sublist" class="vector-toc-list">
			<li id="toc-Call_by_name"
			class="vector-toc-list-item vector-toc-level-2">
			<a class="vector-toc-link" href="#Call_by_name">
				<div class="vector-toc-text">
					<span class="vector-toc-numb">5.1</span>
					<span>Call by name</span>
				</div>
			</a>
			
			<ul id="toc-Call_by_name-sublist" class="vector-toc-list">
			</ul>
		</li>
		<li id="toc-Call_by_need"
			class="vector-toc-list-item vector-toc-level-2">
			<a class="vector-toc-link" href="#Call_by_need">
				<div class="vector-toc-text">
					<span class="vector-toc-numb">5.2</span>
					<span>Call by need</span>
				</div>
			</a>
			
			<ul id="toc-Call_by_need-sublist" class="vector-toc-list">
			</ul>
		</li>
		<li id="toc-Call_by_macro_expansion"
			class="vector-toc-list-item vector-toc-level-2">
			<a class="vector-toc-link" href="#Call_by_macro_expansion">
				<div class="vector-toc-text">
					<span class="vector-toc-numb">5.3</span>
					<span>Call by macro expansion</span>
				</div>
			</a>
			
			<ul id="toc-Call_by_macro_expansion-sublist" class="vector-toc-list">
			</ul>
		</li>
		<li id="toc-Call_by_future"
			class="vector-toc-list-item vector-toc-level-2">
			<a class="vector-toc-link" href="#Call_by_future">
				<div class="vector-toc-text">
					<span class="vector-toc-numb">5.4</span>
					<span>Call by future</span>
				</div>
			</a>
			
			<ul id="toc-Call_by_future-sublist" class="vector-toc-list">
			</ul>
		</li>
		<li id="toc-Optimistic_evaluation"
			class="vector-toc-list-item vector-toc-level-2">
			<a class="vector-toc-link" href="#Optimistic_evaluation">
				<div class="vector-toc-text">
					<span class="vector-toc-numb">5.5</span>
					<span>Optimistic evaluation</span>
				</div>
			</a>
			
			<ul id="toc-Optimistic_evaluation-sublist" class="vector-toc-list">
			</ul>
		</li>
	</ul>
	</li>
	<li id="toc-See_also"
		class="vector-toc-list-item vector-toc-level-1 vector-toc-list-item-expanded">
		<a class="vector-toc-link" href="#See_also">
			<div class="vector-toc-text">
				<span class="vector-toc-numb">6</span>
				<span>See also</span>
			</div>
		</a>
		
		<ul id="toc-See_also-sublist" class="vector-toc-list">
		</ul>
	</li>
	<li id="toc-References"
		class="vector-toc-list-item vector-toc-level-1 vector-toc-list-item-expanded">
		<a class="vector-toc-link" href="#References">
			<div class="vector-toc-text">
				<span class="vector-toc-numb">7</span>
				<span>References</span>
			</div>
		</a>
		
		<ul id="toc-References-sublist" class="vector-toc-list">
		</ul>
	</li>
	<li id="toc-Further_reading"
		class="vector-toc-list-item vector-toc-level-1 vector-toc-list-item-expanded">
		<a class="vector-toc-link" href="#Further_reading">
			<div class="vector-toc-text">
				<span class="vector-toc-numb">8</span>
				<span>Further reading</span>
			</div>
		</a>
		
		<ul id="toc-Further_reading-sublist" class="vector-toc-list">
		</ul>
	</li>
	<li id="toc-External_links"
		class="vector-toc-list-item vector-toc-level-1 vector-toc-list-item-expanded">
		<a class="vector-toc-link" href="#External_links">
			<div class="vector-toc-text">
				<span class="vector-toc-numb">9</span>
				<span>External links</span>
			</div>
		</a>
		
		<ul id="toc-External_links-sublist" class="vector-toc-list">
		</ul>
	</li>
</ul>
</div>

					</div>
		</nav>
			</div>
		</div>
		<div class="mw-content-container">
			<main id="content" class="mw-body">
				<header class="mw-body-header vector-page-titlebar no-font-mode-scale">
					<nav aria-label="Contents" class="vector-toc-landmark">
						
<div id="vector-page-titlebar-toc" class="vector-dropdown vector-page-titlebar-toc vector-button-flush-left"  title="Table of Contents" >
	<input type="checkbox" id="vector-page-titlebar-toc-checkbox" role="button" aria-haspopup="true" data-event-name="ui.dropdown-vector-page-titlebar-toc" class="vector-dropdown-checkbox "  aria-label="Toggle the table of contents"  >
	<label id="vector-page-titlebar-toc-label" for="vector-page-titlebar-toc-checkbox" class="vector-dropdown-label cdx-button cdx-button--fake-button cdx-button--fake-button--enabled cdx-button--weight-quiet cdx-button--icon-only " aria-hidden="true"  ><span class="vector-icon mw-ui-icon-listBullet mw-ui-icon-wikimedia-listBullet"></span>

<span class="vector-dropdown-label-text">Toggle the table of contents</span>
	</label>
	<div class="vector-dropdown-content">


							<div id="vector-page-titlebar-toc-unpinned-container" class="vector-unpinned-container">
			</div>
		
	</div>
</div>

					</nav>
					<h1 id="firstHeading" class="firstHeading mw-first-heading"><span class="mw-page-title-main">Evaluation strategy</span></h1>
							
<div id="p-lang-btn" class="vector-dropdown mw-portlet mw-portlet-lang"  >
	<input type="checkbox" id="p-lang-btn-checkbox" role="button" aria-haspopup="true" data-event-name="ui.dropdown-p-lang-btn" class="vector-dropdown-checkbox mw-interlanguage-selector" aria-label="Go to an article in another language. Available in 14 languages"   >
	<label id="p-lang-btn-label" for="p-lang-btn-checkbox" class="vector-dropdown-label cdx-button cdx-button--fake-button cdx-button--fake-button--enabled cdx-button--weight-quiet cdx-button--action-progressive mw-portlet-lang-heading-14" aria-hidden="true"  ><span class="vector-icon mw-ui-icon-language-progressive mw-ui-icon-wikimedia-language-progressive"></span>

<span class="vector-dropdown-label-text">14 languages</span>
	</label>
	<div class="vector-dropdown-content">

		<div class="vector-menu-content">
			
			<ul class="vector-menu-content-list">
				
				<li class="interlanguage-link interwiki-ar mw-list-item"><a href="https://ar.wikipedia.org/wiki/%D8%A7%D8%B3%D8%AA%D8%B1%D8%A7%D8%AA%D9%8A%D8%AC%D9%8A%D8%A9_%D8%A7%D9%84%D8%AA%D9%82%D9%8A%D9%8A%D9%85" title="استراتيجية التقييم – Arabic" lang="ar" hreflang="ar" data-title="استراتيجية التقييم" data-language-autonym="العربية" data-language-local-name="Arabic" class="interlanguage-link-target"><span>العربية</span></a></li><li class="interlanguage-link interwiki-ca mw-list-item"><a href="https://ca.wikipedia.org/wiki/Estrat%C3%A8gia_d%27avaluaci%C3%B3" title="Estratègia d&#039;avaluació – Catalan" lang="ca" hreflang="ca" data-title="Estratègia d&#039;avaluació" data-language-autonym="Català" data-language-local-name="Catalan" class="interlanguage-link-target"><span>Català</span></a></li><li class="interlanguage-link interwiki-cs mw-list-item"><a href="https://cs.wikipedia.org/wiki/Vyhodnocovac%C3%AD_strategie" title="Vyhodnocovací strategie – Czech" lang="cs" hreflang="cs" data-title="Vyhodnocovací strategie" data-language-autonym="Čeština" data-language-local-name="Czech" class="interlanguage-link-target"><span>Čeština</span></a></li><li class="interlanguage-link interwiki-de mw-list-item"><a href="https://de.wikipedia.org/wiki/Auswertung_(Informatik)" title="Auswertung (Informatik) – German" lang="de" hreflang="de" data-title="Auswertung (Informatik)" data-language-autonym="Deutsch" data-language-local-name="German" class="interlanguage-link-target"><span>Deutsch</span></a></li><li class="interlanguage-link interwiki-fr mw-list-item"><a href="https://fr.wikipedia.org/wiki/Strat%C3%A9gie_d%27%C3%A9valuation_(informatique)" title="Stratégie d&#039;évaluation (informatique) – French" lang="fr" hreflang="fr" data-title="Stratégie d&#039;évaluation (informatique)" data-language-autonym="Français" data-language-local-name="French" class="interlanguage-link-target"><span>Français</span></a></li><li class="interlanguage-link interwiki-ko mw-list-item"><a href="https://ko.wikipedia.org/wiki/%ED%8F%89%EA%B0%80_%EC%A0%84%EB%9E%B5_(%EC%BB%B4%ED%93%A8%ED%84%B0_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D)" title="평가 전략 (컴퓨터 프로그래밍) – Korean" lang="ko" hreflang="ko" data-title="평가 전략 (컴퓨터 프로그래밍)" data-language-autonym="한국어" data-language-local-name="Korean" class="interlanguage-link-target"><span>한국어</span></a></li><li class="interlanguage-link interwiki-ja mw-list-item"><a href="https://ja.wikipedia.org/wiki/%E8%A9%95%E4%BE%A1%E6%88%A6%E7%95%A5" title="評価戦略 – Japanese" lang="ja" hreflang="ja" data-title="評価戦略" data-language-autonym="日本語" data-language-local-name="Japanese" class="interlanguage-link-target"><span>日本語</span></a></li><li class="interlanguage-link interwiki-no mw-list-item"><a href="https://no.wikipedia.org/wiki/Evalueringsstrategi" title="Evalueringsstrategi – Norwegian Bokmål" lang="nb" hreflang="nb" data-title="Evalueringsstrategi" data-language-autonym="Norsk bokmål" data-language-local-name="Norwegian Bokmål" class="interlanguage-link-target"><span>Norsk bokmål</span></a></li><li class="interlanguage-link interwiki-pt mw-list-item"><a href="https://pt.wikipedia.org/wiki/Estrat%C3%A9gia_de_avalia%C3%A7%C3%A3o" title="Estratégia de avaliação – Portuguese" lang="pt" hreflang="pt" data-title="Estratégia de avaliação" data-language-autonym="Português" data-language-local-name="Portuguese" class="interlanguage-link-target"><span>Português</span></a></li><li class="interlanguage-link interwiki-ru mw-list-item"><a href="https://ru.wikipedia.org/wiki/%D0%A1%D1%82%D1%80%D0%B0%D1%82%D0%B5%D0%B3%D0%B8%D1%8F_%D0%B2%D1%8B%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F" title="Стратегия вычисления – Russian" lang="ru" hreflang="ru" data-title="Стратегия вычисления" data-language-autonym="Русский" data-language-local-name="Russian" class="interlanguage-link-target"><span>Русский</span></a></li><li class="interlanguage-link interwiki-sk mw-list-item"><a href="https://sk.wikipedia.org/wiki/Vyhodnocovacia_strat%C3%A9gia" title="Vyhodnocovacia stratégia – Slovak" lang="sk" hreflang="sk" data-title="Vyhodnocovacia stratégia" data-language-autonym="Slovenčina" data-language-local-name="Slovak" class="interlanguage-link-target"><span>Slovenčina</span></a></li><li class="interlanguage-link interwiki-uk mw-list-item"><a href="https://uk.wikipedia.org/wiki/%D0%A1%D1%82%D1%80%D0%B0%D1%82%D0%B5%D0%B3%D1%96%D1%97_%D0%BE%D0%B1%D1%87%D0%B8%D1%81%D0%BB%D0%B5%D0%BD%D0%BD%D1%8F" title="Стратегії обчислення – Ukrainian" lang="uk" hreflang="uk" data-title="Стратегії обчислення" data-language-autonym="Українська" data-language-local-name="Ukrainian" class="interlanguage-link-target"><span>Українська</span></a></li><li class="interlanguage-link interwiki-zh-yue mw-list-item"><a href="https://zh-yue.wikipedia.org/wiki/%E6%B1%82%E5%80%BC%E7%AD%96%E7%95%A5" title="求值策略 – Cantonese" lang="yue" hreflang="yue" data-title="求值策略" data-language-autonym="粵語" data-language-local-name="Cantonese" class="interlanguage-link-target"><span>粵語</span></a></li><li class="interlanguage-link interwiki-zh mw-list-item"><a href="https://zh.wikipedia.org/wiki/%E6%B1%82%E5%80%BC%E7%AD%96%E7%95%A5" title="求值策略 – Chinese" lang="zh" hreflang="zh" data-title="求值策略" data-language-autonym="中文" data-language-local-name="Chinese" class="interlanguage-link-target"><span>中文</span></a></li>
			</ul>
			<div class="after-portlet after-portlet-lang"><span class="wb-langlinks-edit wb-langlinks-link"><a href="https://www.wikidata.org/wiki/Special:EntityPage/Q2881121#sitelinks-wikipedia" title="Edit interlanguage links" class="wbc-editpage">Edit links</a></span></div>
		</div>

	</div>
</div>
</header>
				<div class="vector-page-toolbar vector-feature-custom-font-size-clientpref--excluded">
					<div class="vector-page-toolbar-container">
						<div id="left-navigation">
							<nav aria-label="Namespaces">
								
<div id="p-associated-pages" class="vector-menu vector-menu-tabs mw-portlet mw-portlet-associated-pages"  >
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list">
			
			<li id="ca-nstab-main" class="selected vector-tab-noicon mw-list-item"><a href="/wiki/Evaluation_strategy" title="View the content page [c]" accesskey="c"><span>Article</span></a></li><li id="ca-talk" class="vector-tab-noicon mw-list-item"><a href="/wiki/Talk:Evaluation_strategy" rel="discussion" title="Discuss improvements to the content page [t]" accesskey="t"><span>Talk</span></a></li>
		</ul>
		
	</div>
</div>

								
<div id="vector-variants-dropdown" class="vector-dropdown emptyPortlet"  >
	<input type="checkbox" id="vector-variants-dropdown-checkbox" role="button" aria-haspopup="true" data-event-name="ui.dropdown-vector-variants-dropdown" class="vector-dropdown-checkbox " aria-label="Change language variant"   >
	<label id="vector-variants-dropdown-label" for="vector-variants-dropdown-checkbox" class="vector-dropdown-label cdx-button cdx-button--fake-button cdx-button--fake-button--enabled cdx-button--weight-quiet" aria-hidden="true"  ><span class="vector-dropdown-label-text">English</span>
	</label>
	<div class="vector-dropdown-content">


					
<div id="p-variants" class="vector-menu mw-portlet mw-portlet-variants emptyPortlet"  >
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list">
			
			
		</ul>
		
	</div>
</div>

				
	</div>
</div>

							</nav>
						</div>
						<div id="right-navigation" class="vector-collapsible">
							<nav aria-label="Views">
								
<div id="p-views" class="vector-menu vector-menu-tabs mw-portlet mw-portlet-views"  >
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list">
			
			<li id="ca-view" class="selected vector-tab-noicon mw-list-item"><a href="/wiki/Evaluation_strategy"><span>Read</span></a></li><li id="ca-edit" class="vector-tab-noicon mw-list-item"><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit" title="Edit this page [e]" accesskey="e"><span>Edit</span></a></li><li id="ca-history" class="vector-tab-noicon mw-list-item"><a href="/w/index.php?title=Evaluation_strategy&amp;action=history" title="Past revisions of this page [h]" accesskey="h"><span>View history</span></a></li>
		</ul>
		
	</div>
</div>

							</nav>
				
							<nav class="vector-page-tools-landmark" aria-label="Page tools">
								
<div id="vector-page-tools-dropdown" class="vector-dropdown vector-page-tools-dropdown"  >
	<input type="checkbox" id="vector-page-tools-dropdown-checkbox" role="button" aria-haspopup="true" data-event-name="ui.dropdown-vector-page-tools-dropdown" class="vector-dropdown-checkbox "  aria-label="Tools"  >
	<label id="vector-page-tools-dropdown-label" for="vector-page-tools-dropdown-checkbox" class="vector-dropdown-label cdx-button cdx-button--fake-button cdx-button--fake-button--enabled cdx-button--weight-quiet" aria-hidden="true"  ><span class="vector-dropdown-label-text">Tools</span>
	</label>
	<div class="vector-dropdown-content">


									<div id="vector-page-tools-unpinned-container" class="vector-unpinned-container">
						
<div id="vector-page-tools" class="vector-page-tools vector-pinnable-element">
	<div
	class="vector-pinnable-header vector-page-tools-pinnable-header vector-pinnable-header-unpinned"
	data-feature-name="page-tools-pinned"
	data-pinnable-element-id="vector-page-tools"
	data-pinned-container-id="vector-page-tools-pinned-container"
	data-unpinned-container-id="vector-page-tools-unpinned-container"
>
	<div class="vector-pinnable-header-label">Tools</div>
	<button class="vector-pinnable-header-toggle-button vector-pinnable-header-pin-button" data-event-name="pinnable-header.vector-page-tools.pin">move to sidebar</button>
	<button class="vector-pinnable-header-toggle-button vector-pinnable-header-unpin-button" data-event-name="pinnable-header.vector-page-tools.unpin">hide</button>
</div>

	
<div id="p-cactions" class="vector-menu mw-portlet mw-portlet-cactions emptyPortlet vector-has-collapsible-items"  title="More options" >
	<div class="vector-menu-heading">
		Actions
	</div>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list">
			
			<li id="ca-more-view" class="selected vector-more-collapsible-item mw-list-item"><a href="/wiki/Evaluation_strategy"><span>Read</span></a></li><li id="ca-more-edit" class="vector-more-collapsible-item mw-list-item"><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit" title="Edit this page [e]" accesskey="e"><span>Edit</span></a></li><li id="ca-more-history" class="vector-more-collapsible-item mw-list-item"><a href="/w/index.php?title=Evaluation_strategy&amp;action=history"><span>View history</span></a></li>
		</ul>
		
	</div>
</div>

<div id="p-tb" class="vector-menu mw-portlet mw-portlet-tb"  >
	<div class="vector-menu-heading">
		General
	</div>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list">
			
			<li id="t-whatlinkshere" class="mw-list-item"><a href="/wiki/Special:WhatLinksHere/Evaluation_strategy" title="List of all English Wikipedia pages containing links to this page [j]" accesskey="j"><span>What links here</span></a></li><li id="t-recentchangeslinked" class="mw-list-item"><a href="/wiki/Special:RecentChangesLinked/Evaluation_strategy" rel="nofollow" title="Recent changes in pages linked from this page [k]" accesskey="k"><span>Related changes</span></a></li><li id="t-upload" class="mw-list-item"><a href="//en.wikipedia.org/wiki/Wikipedia:File_Upload_Wizard" title="Upload files [u]" accesskey="u"><span>Upload file</span></a></li><li id="t-permalink" class="mw-list-item"><a href="/w/index.php?title=Evaluation_strategy&amp;oldid=1294288936" title="Permanent link to this revision of this page"><span>Permanent link</span></a></li><li id="t-info" class="mw-list-item"><a href="/w/index.php?title=Evaluation_strategy&amp;action=info" title="More information about this page"><span>Page information</span></a></li><li id="t-cite" class="mw-list-item"><a href="/w/index.php?title=Special:CiteThisPage&amp;page=Evaluation_strategy&amp;id=1294288936&amp;wpFormIdentifier=titleform" title="Information on how to cite this page"><span>Cite this page</span></a></li><li id="t-urlshortener" class="mw-list-item"><a href="/w/index.php?title=Special:UrlShortener&amp;url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FEvaluation_strategy%23Call_by_need"><span>Get shortened URL</span></a></li><li id="t-urlshortener-qrcode" class="mw-list-item"><a href="/w/index.php?title=Special:QrCode&amp;url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FEvaluation_strategy%23Call_by_need"><span>Download QR code</span></a></li>
		</ul>
		
	</div>
</div>

<div id="p-coll-print_export" class="vector-menu mw-portlet mw-portlet-coll-print_export"  >
	<div class="vector-menu-heading">
		Print/export
	</div>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list">
			
			<li id="coll-download-as-rl" class="mw-list-item"><a href="/w/index.php?title=Special:DownloadAsPdf&amp;page=Evaluation_strategy&amp;action=show-download-screen" title="Download this page as a PDF file"><span>Download as PDF</span></a></li><li id="t-print" class="mw-list-item"><a href="/w/index.php?title=Evaluation_strategy&amp;printable=yes" title="Printable version of this page [p]" accesskey="p"><span>Printable version</span></a></li>
		</ul>
		
	</div>
</div>

<div id="p-wikibase-otherprojects" class="vector-menu mw-portlet mw-portlet-wikibase-otherprojects"  >
	<div class="vector-menu-heading">
		In other projects
	</div>
	<div class="vector-menu-content">
		
		<ul class="vector-menu-content-list">
			
			<li id="t-wikibase" class="wb-otherproject-link wb-otherproject-wikibase-dataitem mw-list-item"><a href="https://www.wikidata.org/wiki/Special:EntityPage/Q2881121" title="Structured data on this page hosted by Wikidata [g]" accesskey="g"><span>Wikidata item</span></a></li>
		</ul>
		
	</div>
</div>

</div>

									</div>
				
	</div>
</div>

							</nav>
						</div>
					</div>
				</div>
				<div class="vector-column-end no-font-mode-scale">
					<div class="vector-sticky-pinned-container">
						<nav class="vector-page-tools-landmark" aria-label="Page tools">
							<div id="vector-page-tools-pinned-container" class="vector-pinned-container">
				
							</div>
		</nav>
						<nav class="vector-appearance-landmark" aria-label="Appearance">
							<div id="vector-appearance-pinned-container" class="vector-pinned-container">
				<div id="vector-appearance" class="vector-appearance vector-pinnable-element">
	<div
	class="vector-pinnable-header vector-appearance-pinnable-header vector-pinnable-header-pinned"
	data-feature-name="appearance-pinned"
	data-pinnable-element-id="vector-appearance"
	data-pinned-container-id="vector-appearance-pinned-container"
	data-unpinned-container-id="vector-appearance-unpinned-container"
>
	<div class="vector-pinnable-header-label">Appearance</div>
	<button class="vector-pinnable-header-toggle-button vector-pinnable-header-pin-button" data-event-name="pinnable-header.vector-appearance.pin">move to sidebar</button>
	<button class="vector-pinnable-header-toggle-button vector-pinnable-header-unpin-button" data-event-name="pinnable-header.vector-appearance.unpin">hide</button>
</div>


</div>

							</div>
		</nav>
					</div>
				</div>
				<div id="bodyContent" class="vector-body" aria-labelledby="firstHeading" data-mw-ve-target-container>
					<div class="vector-body-before-content">
							<div class="mw-indicators">
		</div>

						<div id="siteSub" class="noprint">From Wikipedia, the free encyclopedia</div>
					</div>
					<div id="contentSub"><div id="mw-content-subtitle"><span class="mw-redirectedfrom">(Redirected from <a href="/w/index.php?title=Call-by-need&amp;redirect=no" class="mw-redirect" title="Call-by-need">Call-by-need</a>)</span></div></div>
					
					
					<div id="mw-content-text" class="mw-body-content"><div class="mw-content-ltr mw-parser-output" lang="en" dir="ltr"><div class="shortdescription nomobile noexcerpt noprint searchaux" style="display:none">Programming language evaluation rules</div>
<p class="mw-empty-elt">
</p>
<style data-mw-deduplicate="TemplateStyles:r1129693374">.mw-parser-output .hlist dl,.mw-parser-output .hlist ol,.mw-parser-output .hlist ul{margin:0;padding:0}.mw-parser-output .hlist dd,.mw-parser-output .hlist dt,.mw-parser-output .hlist li{margin:0;display:inline}.mw-parser-output .hlist.inline,.mw-parser-output .hlist.inline dl,.mw-parser-output .hlist.inline ol,.mw-parser-output .hlist.inline ul,.mw-parser-output .hlist dl dl,.mw-parser-output .hlist dl ol,.mw-parser-output .hlist dl ul,.mw-parser-output .hlist ol dl,.mw-parser-output .hlist ol ol,.mw-parser-output .hlist ol ul,.mw-parser-output .hlist ul dl,.mw-parser-output .hlist ul ol,.mw-parser-output .hlist ul ul{display:inline}.mw-parser-output .hlist .mw-empty-li{display:none}.mw-parser-output .hlist dt::after{content:": "}.mw-parser-output .hlist dd::after,.mw-parser-output .hlist li::after{content:" · ";font-weight:bold}.mw-parser-output .hlist dd:last-child::after,.mw-parser-output .hlist dt:last-child::after,.mw-parser-output .hlist li:last-child::after{content:none}.mw-parser-output .hlist dd dd:first-child::before,.mw-parser-output .hlist dd dt:first-child::before,.mw-parser-output .hlist dd li:first-child::before,.mw-parser-output .hlist dt dd:first-child::before,.mw-parser-output .hlist dt dt:first-child::before,.mw-parser-output .hlist dt li:first-child::before,.mw-parser-output .hlist li dd:first-child::before,.mw-parser-output .hlist li dt:first-child::before,.mw-parser-output .hlist li li:first-child::before{content:" (";font-weight:normal}.mw-parser-output .hlist dd dd:last-child::after,.mw-parser-output .hlist dd dt:last-child::after,.mw-parser-output .hlist dd li:last-child::after,.mw-parser-output .hlist dt dd:last-child::after,.mw-parser-output .hlist dt dt:last-child::after,.mw-parser-output .hlist dt li:last-child::after,.mw-parser-output .hlist li dd:last-child::after,.mw-parser-output .hlist li dt:last-child::after,.mw-parser-output .hlist li li:last-child::after{content:")";font-weight:normal}.mw-parser-output .hlist ol{counter-reset:listitem}.mw-parser-output .hlist ol>li{counter-increment:listitem}.mw-parser-output .hlist ol>li::before{content:" "counter(listitem)"\a0 "}.mw-parser-output .hlist dd ol>li:first-child::before,.mw-parser-output .hlist dt ol>li:first-child::before,.mw-parser-output .hlist li ol>li:first-child::before{content:" ("counter(listitem)"\a0 "}</style><style data-mw-deduplicate="TemplateStyles:r1246091330">.mw-parser-output .sidebar{width:22em;float:right;clear:right;margin:0.5em 0 1em 1em;background:var(--background-color-neutral-subtle,#f8f9fa);border:1px solid var(--border-color-base,#a2a9b1);padding:0.2em;text-align:center;line-height:1.4em;font-size:88%;border-collapse:collapse;display:table}body.skin-minerva .mw-parser-output .sidebar{display:table!important;float:right!important;margin:0.5em 0 1em 1em!important}.mw-parser-output .sidebar-subgroup{width:100%;margin:0;border-spacing:0}.mw-parser-output .sidebar-left{float:left;clear:left;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-none{float:none;clear:both;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-outer-title{padding:0 0.4em 0.2em;font-size:125%;line-height:1.2em;font-weight:bold}.mw-parser-output .sidebar-top-image{padding:0.4em}.mw-parser-output .sidebar-top-caption,.mw-parser-output .sidebar-pretitle-with-top-image,.mw-parser-output .sidebar-caption{padding:0.2em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-pretitle{padding:0.4em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-title,.mw-parser-output .sidebar-title-with-pretitle{padding:0.2em 0.8em;font-size:145%;line-height:1.2em}.mw-parser-output .sidebar-title-with-pretitle{padding:0.1em 0.4em}.mw-parser-output .sidebar-image{padding:0.2em 0.4em 0.4em}.mw-parser-output .sidebar-heading{padding:0.1em 0.4em}.mw-parser-output .sidebar-content{padding:0 0.5em 0.4em}.mw-parser-output .sidebar-content-with-subgroup{padding:0.1em 0.4em 0.2em}.mw-parser-output .sidebar-above,.mw-parser-output .sidebar-below{padding:0.3em 0.8em;font-weight:bold}.mw-parser-output .sidebar-collapse .sidebar-above,.mw-parser-output .sidebar-collapse .sidebar-below{border-top:1px solid #aaa;border-bottom:1px solid #aaa}.mw-parser-output .sidebar-navbar{text-align:right;font-size:115%;padding:0 0.4em 0.4em}.mw-parser-output .sidebar-list-title{padding:0 0.4em;text-align:left;font-weight:bold;line-height:1.6em;font-size:105%}.mw-parser-output .sidebar-list-title-c{padding:0 0.4em;text-align:center;margin:0 3.3em}@media(max-width:640px){body.mediawiki .mw-parser-output .sidebar{width:100%!important;clear:both;float:none!important;margin-left:0!important;margin-right:0!important}}body.skin--responsive .mw-parser-output .sidebar a>img{max-width:none!important}@media screen{html.skin-theme-clientpref-night .mw-parser-output .sidebar:not(.notheme) .sidebar-list-title,html.skin-theme-clientpref-night .mw-parser-output .sidebar:not(.notheme) .sidebar-title-with-pretitle{background:transparent!important}html.skin-theme-clientpref-night .mw-parser-output .sidebar:not(.notheme) .sidebar-title-with-pretitle a{color:var(--color-progressive)!important}}@media screen and (prefers-color-scheme:dark){html.skin-theme-clientpref-os .mw-parser-output .sidebar:not(.notheme) .sidebar-list-title,html.skin-theme-clientpref-os .mw-parser-output .sidebar:not(.notheme) .sidebar-title-with-pretitle{background:transparent!important}html.skin-theme-clientpref-os .mw-parser-output .sidebar:not(.notheme) .sidebar-title-with-pretitle a{color:var(--color-progressive)!important}}@media print{body.ns-0 .mw-parser-output .sidebar{display:none!important}}</style><table class="sidebar nomobile nowraplinks"><tbody><tr><th class="sidebar-title"><a class="mw-selflink selflink">Evaluation strategies</a></th></tr><tr><td class="sidebar-content" style="text-align: left">
<ul><li><a href="/wiki/Lazy_evaluation" title="Lazy evaluation">Lazy evaluation</a></li>
<li><a href="/wiki/Partial_evaluation" title="Partial evaluation">Partial evaluation</a></li>
<li><a href="/wiki/Remote_evaluation" title="Remote evaluation">Remote evaluation</a></li>
<li><a href="/wiki/Short-circuit_evaluation" title="Short-circuit evaluation">Short-circuit evaluation</a></li></ul></td>
</tr><tr><td class="sidebar-navbar"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1129693374"><style data-mw-deduplicate="TemplateStyles:r1239400231">.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}html.skin-theme-clientpref-night .mw-parser-output .navbar li a abbr{color:var(--color-base)!important}@media(prefers-color-scheme:dark){html.skin-theme-clientpref-os .mw-parser-output .navbar li a abbr{color:var(--color-base)!important}}@media print{.mw-parser-output .navbar{display:none!important}}</style><div class="navbar plainlinks hlist navbar-mini"><ul><li class="nv-view"><a href="/wiki/Template:Evaluation_strategy" title="Template:Evaluation strategy"><abbr title="View this template">v</abbr></a></li><li class="nv-talk"><a href="/wiki/Template_talk:Evaluation_strategy" title="Template talk:Evaluation strategy"><abbr title="Discuss this template">t</abbr></a></li><li class="nv-edit"><a href="/wiki/Special:EditPage/Template:Evaluation_strategy" title="Special:EditPage/Template:Evaluation strategy"><abbr title="Edit this template">e</abbr></a></li></ul></div></td></tr></tbody></table>
<p>In a <a href="/wiki/Programming_language" title="Programming language">programming language</a>, an <b>evaluation strategy</b> is a set of rules for evaluating expressions.<sup id="cite_ref-1" class="reference"><a href="#cite_note-1"><span class="cite-bracket">[</span>1<span class="cite-bracket">]</span></a></sup> The term is often used to refer to the more specific notion of a <i>parameter-passing strategy</i><sup id="cite_ref-2" class="reference"><a href="#cite_note-2"><span class="cite-bracket">[</span>2<span class="cite-bracket">]</span></a></sup> that defines the kind of value that is passed to the function for each parameter (the <i>binding strategy</i>)<sup id="cite_ref-3" class="reference"><a href="#cite_note-3"><span class="cite-bracket">[</span>3<span class="cite-bracket">]</span></a></sup> and whether to evaluate the <a href="/wiki/Parameter_(computer_science)" class="mw-redirect" title="Parameter (computer science)">parameters</a> of a function call, and if so in what order (the <i>evaluation order</i>).<sup id="cite_ref-Wilhelm_4-0" class="reference"><a href="#cite_note-Wilhelm-4"><span class="cite-bracket">[</span>4<span class="cite-bracket">]</span></a></sup> The notion of <a href="/wiki/Reduction_strategy" title="Reduction strategy">reduction strategy</a> is distinct,<sup id="cite_ref-5" class="reference"><a href="#cite_note-5"><span class="cite-bracket">[</span>5<span class="cite-bracket">]</span></a></sup> although some authors conflate the two terms and the definition of each term is not widely agreed upon.<sup id="cite_ref-Pierce_6-0" class="reference"><a href="#cite_note-Pierce-6"><span class="cite-bracket">[</span>6<span class="cite-bracket">]</span></a></sup> A programming language's evaluation strategy is part of its high-level <a href="/wiki/Semantics_(computer_science)" title="Semantics (computer science)">semantics</a>. Some languages, such as <a href="/wiki/PureScript" title="PureScript">PureScript</a>, have variants with different evaluation strategies. Some <a href="/wiki/Declarative_language" class="mw-redirect" title="Declarative language">declarative languages</a>, such as <a href="/wiki/Datalog" title="Datalog">Datalog</a>, support multiple evaluation strategies.
</p><p>The <a href="/wiki/Calling_convention" title="Calling convention">calling convention</a> consists of the low-level platform-specific details of parameter passing.
</p>
<meta property="mw:PageProp/toc">
<div class="mw-heading mw-heading2"><h2 id="Example">Example</h2><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=1" title="Edit section: Example"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<p>To illustrate, executing a function call <code>f(a,b)</code> may first evaluate the arguments <code>a</code> and <code>b</code>, store the results in <a href="/wiki/Reference_(computer_science)" title="Reference (computer science)">references</a> or memory locations <code>ref_a</code> and <code>ref_b</code>, then evaluate the function's body with those references passed in. This gives the function the ability to look up the original argument values passed in through dereferencing the parameters (some languages use specific operators to perform this), to modify them via <a href="/wiki/Assignment_(computer_science)" title="Assignment (computer science)">assignment</a> as if they were local variables, and to return values via the references. This is the call-by-reference evaluation strategy.<sup id="cite_ref-7" class="reference"><a href="#cite_note-7"><span class="cite-bracket">[</span>7<span class="cite-bracket">]</span></a></sup>
</p>
<div class="mw-heading mw-heading2"><h2 id="Table">Table</h2><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=2" title="Edit section: Table"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<p>This is a table of evaluation strategies and representative languages by year introduced. The representative languages are listed in chronological order, starting with the language(s) that introduced the strategy and followed by prominent languages that use the strategy.<sup id="cite_ref-Pragmatics_8-0" class="reference"><a href="#cite_note-Pragmatics-8"><span class="cite-bracket">[</span>8<span class="cite-bracket">]</span></a></sup><sup class="reference nowrap"><span title="Page / location: 434">: 434 </span></sup>
</p>
<table class="wikitable">

<tbody><tr>
<th>Evaluation strategy</th>
<th>Representative languages</th>
<th>Year first introduced
</th></tr>
<tr>
<td>Call by reference</td>
<td><a href="/wiki/Fortran" title="Fortran">Fortran</a> II, <a href="/wiki/PL/I" title="PL/I">PL/I</a></td>
<td>1958
</td></tr>
<tr>
<td>Call by value</td>
<td><a href="/wiki/ALGOL" title="ALGOL">ALGOL</a>, <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a>,<sup id="cite_ref-9" class="reference"><a href="#cite_note-9"><span class="cite-bracket">[</span>9<span class="cite-bracket">]</span></a></sup> <a href="/wiki/Scheme_(programming_language)" title="Scheme (programming language)">Scheme</a>, <a href="/wiki/MATLAB" title="MATLAB">MATLAB</a><sup id="cite_ref-10" class="reference"><a href="#cite_note-10"><span class="cite-bracket">[</span>10<span class="cite-bracket">]</span></a></sup></td>
<td>1960
</td></tr>
<tr>
<td>Call by name</td>
<td><a href="/wiki/ALGOL_60" title="ALGOL 60">ALGOL 60</a>, <a href="/wiki/Simula" title="Simula">Simula</a></td>
<td>1960
</td></tr>
<tr>
<td>Call by copy-restore</td>
<td><a href="/wiki/Fortran_IV" class="mw-redirect" title="Fortran IV">Fortran IV</a>, <a href="/wiki/Ada_(programming_language)" title="Ada (programming language)">Ada</a><sup id="cite_ref-11" class="reference"><a href="#cite_note-11"><span class="cite-bracket">[</span>11<span class="cite-bracket">]</span></a></sup></td>
<td>1962
</td></tr>
<tr>
<td>Call by unification</td>
<td><a href="/wiki/Prolog" title="Prolog">Prolog</a></td>
<td>1965<sup id="cite_ref-Robinson.1965_12-0" class="reference"><a href="#cite_note-Robinson.1965-12"><span class="cite-bracket">[</span>12<span class="cite-bracket">]</span></a></sup><sup id="cite_ref-13" class="reference"><a href="#cite_note-13"><span class="cite-bracket">[</span>13<span class="cite-bracket">]</span></a></sup>
</td></tr>
<tr>
<td>Call by need</td>
<td><a href="/wiki/SASL_(programming_language)" title="SASL (programming language)">SASL</a>,<sup id="cite_ref-14" class="reference"><a href="#cite_note-14"><span class="cite-bracket">[</span>14<span class="cite-bracket">]</span></a></sup> <a href="/wiki/Haskell" title="Haskell">Haskell</a>, <a href="/wiki/R_(programming_language)" title="R (programming language)">R</a><sup id="cite_ref-15" class="reference"><a href="#cite_note-15"><span class="cite-bracket">[</span>15<span class="cite-bracket">]</span></a></sup></td>
<td>1971<sup id="cite_ref-16" class="reference"><a href="#cite_note-16"><span class="cite-bracket">[</span>16<span class="cite-bracket">]</span></a></sup>
</td></tr>
<tr>
<td>Call by sharing</td>
<td><a href="/wiki/CLU_(programming_language)" title="CLU (programming language)">CLU</a>, <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a>, <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a>, <a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a>, <a href="/wiki/Julia_(programming_language)" title="Julia (programming language)">Julia</a></td>
<td>1974<sup id="cite_ref-CLU_Reference_Manual_17-0" class="reference"><a href="#cite_note-CLU_Reference_Manual-17"><span class="cite-bracket">[</span>17<span class="cite-bracket">]</span></a></sup>
</td></tr>
<tr>
<td>Call by reference parameters</td>
<td><a href="/wiki/C%2B%2B" title="C++">C++</a>, <a href="/wiki/PHP" title="PHP">PHP</a>,<sup id="cite_ref-18" class="reference"><a href="#cite_note-18"><span class="cite-bracket">[</span>18<span class="cite-bracket">]</span></a></sup> <a href="/wiki/C_Sharp_(programming_language)" title="C Sharp (programming language)">C#</a>,<sup id="cite_ref-19" class="reference"><a href="#cite_note-19"><span class="cite-bracket">[</span>19<span class="cite-bracket">]</span></a></sup> <a href="/wiki/Visual_Basic_.NET" class="mw-redirect" title="Visual Basic .NET">Visual Basic .NET</a><sup id="cite_ref-20" class="reference"><a href="#cite_note-20"><span class="cite-bracket">[</span>20<span class="cite-bracket">]</span></a></sup></td>
<td>1985<sup id="cite_ref-CPPHist_21-0" class="reference"><a href="#cite_note-CPPHist-21"><span class="cite-bracket">[</span>21<span class="cite-bracket">]</span></a></sup>
</td></tr>
<tr>
<td>Call by reference to <a href="/wiki/Const-correctness" class="mw-redirect" title="Const-correctness">const</a></td>
<td><a href="/wiki/C%2B%2B" title="C++">C++</a>, <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a></td>
<td>1985<sup id="cite_ref-CPPHist_21-1" class="reference"><a href="#cite_note-CPPHist-21"><span class="cite-bracket">[</span>21<span class="cite-bracket">]</span></a></sup>
</td></tr></tbody></table>
<div class="mw-heading mw-heading2"><h2 id="Evaluation_orders">Evaluation orders</h2><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=3" title="Edit section: Evaluation orders"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<p>While the <a href="/wiki/Order_of_operations" title="Order of operations">order of operations</a> defines the <a href="/wiki/Abstract_syntax_tree" title="Abstract syntax tree">abstract syntax tree</a> of the expression, the evaluation order defines the order in which expressions are evaluated. For example, the Python program
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">''</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">x</span>

<span class="nb">print</span><span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">f</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span><span class="n">end</span><span class="o">=</span><span class="s1">''</span><span class="p">)</span>
</pre></div>
<p>outputs <code>123</code> due to Python's left-to-right evaluation order, but a similar program in <a href="/wiki/OCaml" title="OCaml">OCaml</a>:
</p>
<div class="mw-highlight mw-highlight-lang-ocaml mw-content-ltr" dir="ltr"><pre><span></span><span class="k">let</span> <span class="n">f</span> <span class="n">x</span> <span class="o">=</span> <span class="n">print_int</span> <span class="n">x</span><span class="o">;</span> <span class="n">x</span> <span class="o">;;</span>
<span class="n">print_int</span> <span class="o">(</span><span class="n">f</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">f</span> <span class="mi">2</span><span class="o">)</span>
</pre></div>
<p>outputs <code>213</code> due to OCaml's right-to-left evaluation order.
</p><p>The evaluation order is mainly visible in code with <a href="/wiki/Side_effect_(computer_science)" title="Side effect (computer science)">side effects</a>, but it also affects the performance of the code because a rigid order inhibits <a href="/wiki/Instruction_scheduling" title="Instruction scheduling">instruction scheduling</a>. For this reason language standards such as C++ traditionally left the order unspecified, although languages such as Java and C# define the evaluation order as left-to-right<sup id="cite_ref-Pragmatics_8-1" class="reference"><a href="#cite_note-Pragmatics-8"><span class="cite-bracket">[</span>8<span class="cite-bracket">]</span></a></sup><sup class="reference nowrap"><span title="Page / location: 240–241">: 240–241 </span></sup> and the <a href="/wiki/C%2B%2B17" title="C++17">C++17</a> standard has added constraints on the evaluation order.<sup id="cite_ref-22" class="reference"><a href="#cite_note-22"><span class="cite-bracket">[</span>22<span class="cite-bracket">]</span></a></sup>
</p>
<div class="mw-heading mw-heading3"><h3 id="Strict_evaluation">Strict evaluation <span class="anchor" id="Applicative_order"></span> <span class="anchor" id="Eager_evaluation"></span></h3><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=4" title="Edit section: Strict evaluation"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<p><b>Applicative order</b> is a family of evaluation orders in which a function's arguments are evaluated completely before the function is applied.
<sup id="cite_ref-SICP_23-0" class="reference"><a href="#cite_note-SICP-23"><span class="cite-bracket">[</span>23<span class="cite-bracket">]</span></a></sup> This has the effect of making the function <a href="/wiki/Strict_function" title="Strict function">strict</a>, i.e. the function's result is undefined if any of the arguments are undefined, so applicative order evaluation is more commonly called <b>strict evaluation</b>. Furthermore, a function call is performed as soon as it is encountered in a procedure, so it is also called <b>eager evaluation</b> or <b>greedy evaluation</b>.<sup id="cite_ref-24" class="reference"><a href="#cite_note-24"><span class="cite-bracket">[</span>24<span class="cite-bracket">]</span></a></sup><sup id="cite_ref-25" class="reference"><a href="#cite_note-25"><span class="cite-bracket">[</span>25<span class="cite-bracket">]</span></a></sup> Some authors refer to strict evaluation as "call by value" due to the call-by-value binding strategy requiring strict evaluation.<sup id="cite_ref-Wilhelm_4-1" class="reference"><a href="#cite_note-Wilhelm-4"><span class="cite-bracket">[</span>4<span class="cite-bracket">]</span></a></sup>
</p><p>Common Lisp, <a href="/wiki/Eiffel_(programming_language)" title="Eiffel (programming language)">Eiffel</a> and Java evaluate function arguments left-to-right. C leaves the order undefined.<sup id="cite_ref-26" class="reference"><a href="#cite_note-26"><span class="cite-bracket">[</span>26<span class="cite-bracket">]</span></a></sup> Scheme requires the execution order to be the sequential execution of an unspecified permutation of the arguments.<sup id="cite_ref-27" class="reference"><a href="#cite_note-27"><span class="cite-bracket">[</span>27<span class="cite-bracket">]</span></a></sup> <a href="/wiki/OCaml" title="OCaml">OCaml</a> similarly leaves the order unspecified, but in practice evaluates arguments right-to-left due to the design of its <a href="/wiki/Abstract_machine" title="Abstract machine">abstract machine</a>.<sup id="cite_ref-28" class="reference"><a href="#cite_note-28"><span class="cite-bracket">[</span>28<span class="cite-bracket">]</span></a></sup> All of these are strict evaluation.
</p>
<div class="mw-heading mw-heading3"><h3 id="Non-strict_evaluation">Non-strict evaluation <span class="anchor" id="Normal_order"></span></h3><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=5" title="Edit section: Non-strict evaluation"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<p>A <b>non-strict evaluation order</b> is an evaluation order that is not strict, that is, a function may return a result before all of its arguments are fully evaluated.<sup id="cite_ref-Tremblay_29-0" class="reference"><a href="#cite_note-Tremblay-29"><span class="cite-bracket">[</span>29<span class="cite-bracket">]</span></a></sup><sup class="reference nowrap"><span title="Page / location: 46–47">: 46–47 </span></sup> The prototypical example is <b>normal order evaluation</b>, which does not evaluate any of the arguments until they are needed in the body of the function.<sup id="cite_ref-30" class="reference"><a href="#cite_note-30"><span class="cite-bracket">[</span>30<span class="cite-bracket">]</span></a></sup> Normal order evaluation has the property that it terminates without error whenever any other evaluation order would have terminated without error.<sup id="cite_ref-31" class="reference"><a href="#cite_note-31"><span class="cite-bracket">[</span>31<span class="cite-bracket">]</span></a></sup> The name "normal order" comes from the lambda calculus, where normal order reduction will find a normal form if there is one (it is a "normalizing" <a href="/wiki/Reduction_strategy" title="Reduction strategy">reduction strategy</a>).<sup id="cite_ref-Mazzola_32-0" class="reference"><a href="#cite_note-Mazzola-32"><span class="cite-bracket">[</span>32<span class="cite-bracket">]</span></a></sup> <a href="/wiki/Lazy_evaluation" title="Lazy evaluation">Lazy evaluation</a> is classified in this article as a binding technique rather than an evaluation order. But this distinction is not always followed and some authors define lazy evaluation as normal order evaluation or vice-versa,<sup id="cite_ref-SICP_23-1" class="reference"><a href="#cite_note-SICP-23"><span class="cite-bracket">[</span>23<span class="cite-bracket">]</span></a></sup><sup id="cite_ref-Sturm_33-0" class="reference"><a href="#cite_note-Sturm-33"><span class="cite-bracket">[</span>33<span class="cite-bracket">]</span></a></sup> or confuse non-strictness with lazy evaluation.<sup id="cite_ref-Tremblay_29-1" class="reference"><a href="#cite_note-Tremblay-29"><span class="cite-bracket">[</span>29<span class="cite-bracket">]</span></a></sup><sup class="reference nowrap"><span title="Page / location: 43–44">: 43–44 </span></sup>
</p><p>Boolean expressions in many languages use a form of non-strict evaluation called <a href="/wiki/Short-circuit_evaluation" title="Short-circuit evaluation">short-circuit evaluation</a>, where evaluation evaluates the left expression but may skip the right expression if the result can be determined—for example, in a disjunctive expression (OR) where <code>true</code> is encountered, or in a conjunctive expression (AND) where <code>false</code> is encountered, and so forth.<sup id="cite_ref-Sturm_33-1" class="reference"><a href="#cite_note-Sturm-33"><span class="cite-bracket">[</span>33<span class="cite-bracket">]</span></a></sup> Conditional expressions similarly use non-strict evaluation - only one of the branches is evaluated.<sup id="cite_ref-Tremblay_29-2" class="reference"><a href="#cite_note-Tremblay-29"><span class="cite-bracket">[</span>29<span class="cite-bracket">]</span></a></sup>
</p>
<div class="mw-heading mw-heading3"><h3 id="Comparison_of_applicative_order_and_normal_order_evaluation">Comparison of applicative order and normal order evaluation</h3><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=6" title="Edit section: Comparison of applicative order and normal order evaluation"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<p>With normal order evaluation, expressions containing an expensive computation, an error, or an infinite loop will be ignored if not needed,<sup id="cite_ref-Wilhelm_4-2" class="reference"><a href="#cite_note-Wilhelm-4"><span class="cite-bracket">[</span>4<span class="cite-bracket">]</span></a></sup> allowing the specification of user-defined control flow constructs, a facility not available with applicative order evaluation. Normal order evaluation uses complex structures such as <a href="/wiki/Thunk" title="Thunk">thunks</a> for unevaluated expressions, compared to the <a href="/wiki/Call_stack" title="Call stack">call stack</a> used in applicative order evaluation.<sup id="cite_ref-34" class="reference"><a href="#cite_note-34"><span class="cite-bracket">[</span>34<span class="cite-bracket">]</span></a></sup> Normal order evaluation has historically had a lack of usable debugging tools due to its complexity.<sup id="cite_ref-35" class="reference"><a href="#cite_note-35"><span class="cite-bracket">[</span>35<span class="cite-bracket">]</span></a></sup>
</p>
<div class="mw-heading mw-heading2"><h2 id="Strict_binding_strategies">Strict binding strategies</h2><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=7" title="Edit section: Strict binding strategies"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<div class="mw-heading mw-heading3"><h3 id="Call_by_value">Call by value</h3><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=8" title="Edit section: Call by value"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<p>In call by value (or pass by value), the evaluated value of the argument expression is bound to the corresponding variable in the function (frequently by copying the value into a new memory region). If the function or procedure is able to assign values to its parameters, only its local variable is assigned—that is, anything passed into a function call is unchanged in the caller's <a href="/wiki/Scope_(programming)" class="mw-redirect" title="Scope (programming)">scope</a> when the function returns. For example, in <a href="/wiki/Pascal_(programming_language)" title="Pascal (programming language)">Pascal</a>, passing an array by value will cause the entire array to be copied, and any mutations to this array will be invisible to the caller:<sup id="cite_ref-36" class="reference"><a href="#cite_note-36"><span class="cite-bracket">[</span>36<span class="cite-bracket">]</span></a></sup>
</p>
<div class="mw-highlight mw-highlight-lang-pascal mw-content-ltr" dir="ltr"><pre><span></span><span class="k">program</span><span class="w"> </span><span class="n">Main</span><span class="o">;</span>
<span class="k">uses</span><span class="w"> </span><span class="n">crt</span><span class="o">;</span>

<span class="k">procedure</span><span class="w"> </span><span class="nf">PrintArray</span><span class="p">(</span><span class="n">a</span><span class="o">:</span><span class="w"> </span><span class="k">Array</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="kt">integer</span><span class="p">)</span><span class="o">;</span>
<span class="k">var</span>
<span class="w">  </span><span class="n">i</span><span class="o">:</span><span class="w"> </span><span class="kt">Integer</span><span class="o">;</span>
<span class="k">begin</span>
<span class="w">  </span><span class="k">for</span><span class="w"> </span><span class="n">i</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="nb">Low</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="w"> </span><span class="k">to</span><span class="w"> </span><span class="nb">High</span><span class="p">(</span><span class="n">a</span><span class="p">)</span><span class="w"> </span><span class="k">do</span>
<span class="w">    </span><span class="nb">Write</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">])</span><span class="o">;</span>
<span class="w">  </span><span class="nb">WriteLn</span><span class="p">()</span><span class="o">;</span>
<span class="k">end</span><span class="o">;</span>

<span class="k">Procedure</span><span class="w"> </span><span class="nf">Modify</span><span class="p">(</span><span class="n">Row</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="k">Array</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="kt">integer</span><span class="p">)</span><span class="o">;</span><span class="w">  </span>
<span class="k">begin</span><span class="w">  </span>
<span class="w">  </span><span class="n">PrintArray</span><span class="p">(</span><span class="n">Row</span><span class="p">)</span><span class="o">;</span><span class="w"> </span><span class="c1">// 123</span>
<span class="w">  </span><span class="n">Row</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="mi">4</span><span class="o">;</span>
<span class="w">  </span><span class="n">PrintArray</span><span class="p">(</span><span class="n">Row</span><span class="p">)</span><span class="o">;</span><span class="w"> </span><span class="c1">// 143</span>
<span class="k">end</span><span class="o">;</span>

<span class="k">Var</span>
<span class="w">  </span><span class="n">A</span><span class="w"> </span><span class="o">:</span><span class="w"> </span><span class="k">Array</span><span class="w"> </span><span class="k">of</span><span class="w"> </span><span class="kt">integer</span><span class="o">;</span><span class="w"> </span>
<span class="k">begin</span>
<span class="w">  </span><span class="n">A</span><span class="w"> </span><span class="o">:=</span><span class="w"> </span><span class="p">[</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="p">]</span><span class="o">;</span>
<span class="w">  </span><span class="n">PrintArray</span><span class="p">(</span><span class="n">A</span><span class="p">)</span><span class="o">;</span><span class="w"> </span><span class="c1">// 123</span>
<span class="w">  </span><span class="n">Modify</span><span class="p">(</span><span class="n">A</span><span class="p">)</span><span class="o">;</span>
<span class="w">  </span><span class="n">PrintArray</span><span class="p">(</span><span class="n">A</span><span class="p">)</span><span class="o">;</span><span class="w"> </span><span class="c1">// 123</span>
<span class="k">end</span><span class="o">.</span>
</pre></div>
<div class="mw-heading mw-heading4"><h4 id="Semantic_drift">Semantic drift</h4><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=9" title="Edit section: Semantic drift"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<p>Strictly speaking, under call by value, no operations performed by the called routine can be visible to the caller, other than as part of the return value.<sup id="cite_ref-CLU_Reference_Manual_17-1" class="reference"><a href="#cite_note-CLU_Reference_Manual-17"><span class="cite-bracket">[</span>17<span class="cite-bracket">]</span></a></sup> This implies a form of <a href="/wiki/Purely_functional_programming" title="Purely functional programming">purely functional programming</a> in the implementation semantics. However, the circumlocution "call by value where the value is a reference" has become common in some languages, for example, the Java community.<sup id="cite_ref-Java_is_Pass-by-Value,_Dammit!_37-0" class="reference"><a href="#cite_note-Java_is_Pass-by-Value,_Dammit!-37"><span class="cite-bracket">[</span>37<span class="cite-bracket">]</span></a></sup> Compared to traditional pass by value, the value which is passed is not a value as understood by the ordinary meaning of value, such as an integer that can be written as a literal, but an implementation-internal <a href="/wiki/Reference_(computer_science)" title="Reference (computer science)">reference</a> handle. Mutations to this reference handle are visible in the caller. Due to the visible mutation, this form of "call by value" is more properly referred to as <a href="#Call_by_sharing">call by sharing</a>.<sup id="cite_ref-CLU_Reference_Manual_17-2" class="reference"><a href="#cite_note-CLU_Reference_Manual-17"><span class="cite-bracket">[</span>17<span class="cite-bracket">]</span></a></sup>
</p><p>In <a href="/wiki/Purely_functional_language" class="mw-redirect" title="Purely functional language">purely functional languages</a>, values and data structures are immutable, so there is no possibility for a function to modify any of its arguments. As such, there is typically no semantic difference between passing by value and passing by reference or a pointer to the data structure, and implementations frequently use call by reference internally for the efficiency benefits. Nonetheless, these languages are typically described as call by value languages.
</p>
<div class="mw-heading mw-heading3"><h3 id="Call_by_reference">Call by reference</h3><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=10" title="Edit section: Call by reference"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<p>Call by reference (or pass by reference) is an evaluation strategy where a parameter is bound to an implicit <a href="/wiki/Reference_(computer_science)" title="Reference (computer science)">reference</a> to the variable used as argument, rather than a copy of its value. This typically means that the function can modify (i.e., <a href="/wiki/Assignment_(computer_science)" title="Assignment (computer science)">assign to</a>) the variable used as argument—something that will be seen by its caller. Call by reference can therefore be used to provide an additional channel of communication between the called function and the calling function. Pass by reference can significantly improve performance: calling a function with a many-megabyte structure as an argument does not have to copy the large structure, only the reference to the structure (which is generally a machine word and only a few bytes). However, a call-by-reference language makes it more difficult for a programmer to track the effects of a function call, and may introduce subtle bugs.
</p><p>Due to variation in syntax, the difference between call by reference (where the reference type is implicit) and call by sharing (where the reference type is explicit) is often unclear on first glance. A simple litmus test is if it's possible to write a traditional <code>swap(a, b)</code> function in the language.<sup id="cite_ref-Java_is_Pass-by-Value,_Dammit!_37-1" class="reference"><a href="#cite_note-Java_is_Pass-by-Value,_Dammit!-37"><span class="cite-bracket">[</span>37<span class="cite-bracket">]</span></a></sup> For example in Fortran:
</p>
<div class="mw-highlight mw-highlight-lang-fortran mw-content-ltr" dir="ltr"><pre><span></span><span class="k">program </span><span class="n">Main</span>
<span class="w">    </span><span class="k">implicit none</span>
<span class="k">    </span><span class="kt">integer</span><span class="w"> </span><span class="kd">::</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span>
<span class="w">    </span><span class="kt">integer</span><span class="w"> </span><span class="kd">::</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">2</span>
<span class="w">    </span><span class="k">call </span><span class="n">Swap</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="p">)</span>
<span class="w">    </span><span class="k">print</span><span class="w"> </span><span class="o">*</span><span class="p">,</span><span class="w"> </span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="c">! 2 1</span>
<span class="k">contains</span>
<span class="k">    subroutine </span><span class="n">Swap</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="p">)</span>
<span class="w">        </span><span class="kt">integer</span><span class="p">,</span><span class="w"> </span><span class="k">intent</span><span class="p">(</span><span class="n">inout</span><span class="p">)</span><span class="w"> </span><span class="kd">::</span><span class="w"> </span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="n">b</span>
<span class="w">        </span><span class="kt">integer</span><span class="w"> </span><span class="kd">::</span><span class="w"> </span><span class="n">temp</span>
<span class="w">        </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">a</span>
<span class="w">        </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">b</span>
<span class="w">        </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temp</span>
<span class="w">    </span><span class="k">end subroutine </span><span class="n">Swap</span>
<span class="k">end program </span><span class="n">Main</span>
</pre></div>
<p>Therefore, Fortran's <code>inout</code> intent implements call-by-reference; any variable can be implicitly converted to a reference handle. In contrast the closest one can get in Java is:
<span class="anchor" id="Java-box"></span>
</p>
<div class="mw-highlight mw-highlight-lang-java mw-content-ltr" dir="ltr"><pre><span></span><span class="kd">class</span> <span class="nc">Main</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="kd">static</span><span class="w"> </span><span class="kd">class</span> <span class="nc">Box</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">value</span><span class="p">;</span>
<span class="w">        </span><span class="kd">public</span><span class="w"> </span><span class="nf">Box</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="n">value</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">            </span><span class="k">this</span><span class="p">.</span><span class="na">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">value</span><span class="p">;</span>
<span class="w">        </span><span class="p">}</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">swap</span><span class="p">(</span><span class="n">Box</span><span class="w"> </span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="n">Box</span><span class="w"> </span><span class="n">b</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="kt">int</span><span class="w"> </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">a</span><span class="p">.</span><span class="na">value</span><span class="p">;</span>
<span class="w">        </span><span class="n">a</span><span class="p">.</span><span class="na">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">b</span><span class="p">.</span><span class="na">value</span><span class="p">;</span>
<span class="w">        </span><span class="n">b</span><span class="p">.</span><span class="na">value</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temp</span><span class="p">;</span>
<span class="w">    </span><span class="p">}</span>
<span class="w">    </span><span class="kd">public</span><span class="w"> </span><span class="kd">static</span><span class="w"> </span><span class="kt">void</span><span class="w"> </span><span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span><span class="w"> </span><span class="n">args</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">        </span><span class="n">Box</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Box</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="w">        </span><span class="n">Box</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">new</span><span class="w"> </span><span class="n">Box</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="w">        </span><span class="n">swap</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="p">);</span>
<span class="w">        </span><span class="n">System</span><span class="p">.</span><span class="na">out</span><span class="p">.</span><span class="na">println</span><span class="p">(</span><span class="n">String</span><span class="p">.</span><span class="na">format</span><span class="p">(</span><span class="s">"%d %d"</span><span class="p">,</span><span class="w"> </span><span class="n">a</span><span class="p">.</span><span class="na">value</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="p">.</span><span class="na">value</span><span class="p">));</span>
<span class="w">    </span><span class="p">}</span>
<span class="p">}</span>
<span class="c1">// output: 2 1</span>
</pre></div>
<p>where an explicit <code>Box</code> type must be used to introduce a handle. Java is call-by-sharing but not call-by-reference.<sup id="cite_ref-Java_is_Pass-by-Value,_Dammit!_37-2" class="reference"><a href="#cite_note-Java_is_Pass-by-Value,_Dammit!-37"><span class="cite-bracket">[</span>37<span class="cite-bracket">]</span></a></sup>
</p>
<div class="mw-heading mw-heading3"><h3 id="Call_by_copy-restore">Call by copy-restore</h3><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=11" title="Edit section: Call by copy-restore"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<p>Call by copy-restore—also known as "copy-in copy-out", "call by value result", "call by value return" (as termed in the <a href="/wiki/Fortran" title="Fortran">Fortran</a> community)—is a variation of call by reference. With call by copy-restore, the contents of the argument are copied to a new variable local to the call invocation. The function may then modify this variable, similarly to call by reference, but as the variable is local, the modifications are not visible outside of the call invocation during the call. When the function call returns, the updated contents of this variable are copied back to overwrite the original argument ("restored").<sup id="cite_ref-38" class="reference"><a href="#cite_note-38"><span class="cite-bracket">[</span>38<span class="cite-bracket">]</span></a></sup>
</p><p>The semantics of call by copy-restore is similar in many cases to call by reference, but differs when two or more function arguments <a href="/wiki/Aliasing_(computing)" title="Aliasing (computing)">alias</a> one another (i.e., point to the same variable in the caller's environment). Under call by reference, writing to one argument will affect the other during the function's execution. Under call by copy-restore, writing to one argument will not affect the other during the function's execution, but at the end of the call, the values of the two arguments may differ, and it is unclear which argument is copied back first and therefore what value the caller's variable receives.<sup id="cite_ref-39" class="reference"><a href="#cite_note-39"><span class="cite-bracket">[</span>39<span class="cite-bracket">]</span></a></sup> For example, Ada specifies that the copy-out assignment for each <code class="mw-highlight mw-highlight-lang-text mw-content-ltr" style="" dir="ltr">in out</code> or <code class="mw-highlight mw-highlight-lang-text mw-content-ltr" style="" dir="ltr">out</code> parameter occurs in an arbitrary order.<sup id="cite_ref-40" class="reference"><a href="#cite_note-40"><span class="cite-bracket">[</span>40<span class="cite-bracket">]</span></a></sup> From the following program (illegal in Ada 2012)<sup id="cite_ref-41" class="reference"><a href="#cite_note-41"><span class="cite-bracket">[</span>41<span class="cite-bracket">]</span></a></sup> it can be seen that the behavior of <a href="/wiki/GNAT" title="GNAT">GNAT</a> is to copy in left-to-right order on return:
</p>
<div class="mw-highlight mw-highlight-lang-ada mw-content-ltr" dir="ltr"><pre><span></span><span class="kn">with</span> <span class="n">Ada.Text_IO</span><span class="p">;</span> <span class="kn">use</span> <span class="n">Ada.Text_IO</span><span class="p">;</span>

<span class="kd">procedure</span> <span class="nf">Test_Copy_Restore</span> <span class="kr">is</span>
  <span class="kd">procedure</span> <span class="nf">Modify</span> <span class="p">(</span><span class="nv">A</span><span class="p">,</span> <span class="nv">B</span> <span class="p">: </span><span class="nv">in</span> <span class="nv">out</span> <span class="nv">Integer</span><span class="p">)</span> <span class="kr">is</span>
  <span class="kr">begin</span>
      <span class="n">A</span> <span class="p">:=</span> <span class="n">A</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
      <span class="n">B</span> <span class="p">:=</span> <span class="n">B</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
  <span class="kr">end</span> <span class="nf">Modify</span><span class="p">;</span>
  <span class="n">X</span> <span class="p">:</span> <span class="kt">Integer</span> <span class="p">:=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kr">begin</span>
  <span class="n">Modify</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">X</span><span class="p">);</span>
  <span class="n">Put_Line</span><span class="p">(</span><span class="s">"X = "</span> <span class="o">&amp;</span> <span class="kt">Integer</span><span class="p">'</span><span class="na">Image</span><span class="p">(</span><span class="n">X</span><span class="p">));</span>
<span class="kr">end</span> <span class="nf">Test_Copy_Restore</span><span class="p">;</span>
<span class="c1">-- $ gnatmake -gnatd.E test_copy_restore.adb; ./test_copy_restore</span>
<span class="c1">-- test_copy_restore.adb:12:10: warning: writable actual for "A" overlaps with actual for "B" [-gnatw.i]</span>
<span class="c1">-- X = 2</span>
</pre></div>
<p>If the program returned 1 it would be copying right-to-left, and under call by reference semantics the program would return 3.
</p><p>When the reference is passed to the caller uninitialized (for example an <code class="mw-highlight mw-highlight-lang-text mw-content-ltr" style="" dir="ltr">out</code> parameter in Ada as opposed to an <code class="mw-highlight mw-highlight-lang-text mw-content-ltr" style="" dir="ltr">in out</code> parameter), this evaluation strategy may be called "call by result".
</p><p>This strategy has gained attention in <a href="/wiki/Multiprocessing" title="Multiprocessing">multiprocessing</a> and <a href="/wiki/Remote_procedure_call" title="Remote procedure call">remote procedure calls</a>,<sup id="cite_ref-rfc5531_42-0" class="reference"><a href="#cite_note-rfc5531-42"><span class="cite-bracket">[</span>42<span class="cite-bracket">]</span></a></sup> as unlike call-by-reference it does not require frequent communication between threads of execution for variable access.
</p>
<div class="mw-heading mw-heading3"><h3 id="Call_by_sharing">Call by sharing</h3><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=12" title="Edit section: Call by sharing"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<p>Call by sharing (also known as "pass by sharing", "call by object", or "call by object-sharing") is an evaluation strategy that is intermediate between call by value and call by reference. Rather than every variable being exposed as a reference, only a specific class of values, termed "references", "<a href="/wiki/Boxed_type" class="mw-redirect" title="Boxed type">boxed types</a>", or "objects", have reference semantics, and it is the addresses of these pointers that are passed into the function. Like call by value, the value of the address passed is a copy, and direct assignment to the parameter of the function overwrites the copy and is not visible to the calling function. Like call by reference, mutating the target of the pointer is visible to the calling function. Mutations of a mutable object within the function are visible to the caller because the object is not copied or cloned—it is <i>shared</i>, hence the name "call by sharing".<sup id="cite_ref-CLU_Reference_Manual_17-3" class="reference"><a href="#cite_note-CLU_Reference_Manual-17"><span class="cite-bracket">[</span>17<span class="cite-bracket">]</span></a></sup>
</p><p>The technique was first noted by <a href="/wiki/Barbara_Liskov" title="Barbara Liskov">Barbara Liskov</a> in 1974 for the <a href="/wiki/CLU_(programming_language)" title="CLU (programming language)">CLU</a> language.<sup id="cite_ref-CLU_Reference_Manual_17-4" class="reference"><a href="#cite_note-CLU_Reference_Manual-17"><span class="cite-bracket">[</span>17<span class="cite-bracket">]</span></a></sup> It is used by many modern languages such as <a href="/wiki/Python_(programming_language)" title="Python (programming language)">Python</a> (the shared values being called "objects"),<sup id="cite_ref-Lundh_Call_Object_43-0" class="reference"><a href="#cite_note-Lundh_Call_Object-43"><span class="cite-bracket">[</span>43<span class="cite-bracket">]</span></a></sup> <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a> (objects), <a href="/wiki/Ruby_(programming_language)" title="Ruby (programming language)">Ruby</a> (objects), <a href="/wiki/JavaScript" title="JavaScript">JavaScript</a> (objects), Scheme (data structures such as vectors),<sup id="cite_ref-44" class="reference"><a href="#cite_note-44"><span class="cite-bracket">[</span>44<span class="cite-bracket">]</span></a></sup> <a href="/wiki/AppleScript" title="AppleScript">AppleScript</a> (lists, records, dates, and script objects), OCaml and <a href="/wiki/ML_(programming_language)" title="ML (programming language)">ML</a> (references, records, arrays, objects, and other compound data types), <a href="/wiki/Maple_(software)" title="Maple (software)">Maple</a> (rtables and tables), and <a href="/wiki/Tcl" title="Tcl">Tcl</a> (objects).<sup id="cite_ref-45" class="reference"><a href="#cite_note-45"><span class="cite-bracket">[</span>45<span class="cite-bracket">]</span></a></sup> The term "call by sharing" as used in this article is not in common use; the terminology is inconsistent across different sources. For example, in the Java community, they say that Java is call by value.<sup id="cite_ref-Java_is_Pass-by-Value,_Dammit!_37-3" class="reference"><a href="#cite_note-Java_is_Pass-by-Value,_Dammit!-37"><span class="cite-bracket">[</span>37<span class="cite-bracket">]</span></a></sup>
</p><p>For <a href="/wiki/Immutable_object" title="Immutable object">immutable objects</a>, there is no real difference between call by sharing and call by value, except if object identity is visible in the language. The use of call by sharing with mutable objects is an alternative to <a href="/wiki/Output_parameter" class="mw-redirect" title="Output parameter">input/output parameters</a>: the parameter is not assigned to (the argument is not overwritten and object identity is not changed), but the object (argument) is mutated.<sup id="cite_ref-CA1021_46-0" class="reference"><a href="#cite_note-CA1021-46"><span class="cite-bracket">[</span>46<span class="cite-bracket">]</span></a></sup>
</p><p>For example, in Python, lists are mutable and passed with call by sharing, so:
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">a_list</span><span class="p">):</span>
    <span class="n">a_list</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

<span class="n">m</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">f</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
</pre></div>
<p>outputs <code>[1]</code> because the <code>append</code> method modifies the object on which it is called.
</p><p>In contrast, assignments within a function are not noticeable to the caller. For example, this code binds the formal argument to a new object, but it is not visible to the caller because it does not mutate <code class="mw-highlight mw-highlight-lang-text mw-content-ltr" style="" dir="ltr">a_list</code>:
</p>
<div class="mw-highlight mw-highlight-lang-python mw-content-ltr" dir="ltr"><pre><span></span><span class="k">def</span> <span class="nf">f</span><span class="p">(</span><span class="n">a_list</span><span class="p">):</span>
    <span class="n">a_list</span> <span class="o">=</span> <span class="n">a_list</span> <span class="o">+</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">a_list</span><span class="p">)</span> <span class="c1"># [1]</span>

<span class="n">m</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">f</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="n">m</span><span class="p">)</span> <span class="c1"># []</span>
</pre></div>
<div class="mw-heading mw-heading3"><h3 id="Call_by_address">Call by address</h3><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=13" title="Edit section: Call by address"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<p><span class="anchor" id="call-by-address"></span>
<b>Call by address</b>, pass by address, or call/pass by <a href="/wiki/Pointer_(computer_programming)" title="Pointer (computer programming)">pointer</a> is a parameter passing method where the address of the argument is passed as the formal parameter. Inside the function, the address (pointer) may be used to access or modify the value of the argument. For example, the swap operation can be implemented as follows in C:<sup id="cite_ref-47" class="reference"><a href="#cite_note-47"><span class="cite-bracket">[</span>47<span class="cite-bracket">]</span></a></sup>
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdio.h&gt;</span>

<span class="kt">void</span><span class="w"> </span><span class="nf">swap</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="w"> </span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="o">*</span><span class="w"> </span><span class="n">b</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">*</span><span class="n">a</span><span class="p">;</span>
<span class="w">    </span><span class="o">*</span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">*</span><span class="n">b</span><span class="p">;</span>
<span class="w">    </span><span class="o">*</span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temp</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span>
<span class="w">    </span><span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="o">&amp;</span><span class="n">b</span><span class="p">);</span>
<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">"%d %d"</span><span class="p">,</span><span class="w"> </span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="p">);</span><span class="w"> </span><span class="c1">// 2 1</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
<p>Some authors treat <code>&amp;</code> as part of the syntax of calling <code class="mw-highlight mw-highlight-lang-text mw-content-ltr" style="" dir="ltr">swap</code>. Under this view, C supports the call-by-reference parameter passing strategy.<sup id="cite_ref-48" class="reference"><a href="#cite_note-48"><span class="cite-bracket">[</span>48<span class="cite-bracket">]</span></a></sup> Other authors take a differing view that the presented implementation of <code class="mw-highlight mw-highlight-lang-text mw-content-ltr" style="" dir="ltr">swap</code> in C is only a simulation of call-by-reference using pointers.<sup id="cite_ref-49" class="reference"><a href="#cite_note-49"><span class="cite-bracket">[</span>49<span class="cite-bracket">]</span></a></sup> Under this "simulation" view, mutable variables in C are not first-class (that is, l-values are not expressions), rather pointer types are. In this view, the presented swap program is syntactic sugar for a program that uses pointers throughout,<sup id="cite_ref-50" class="reference"><a href="#cite_note-50"><span class="cite-bracket">[</span>50<span class="cite-bracket">]</span></a></sup> for example this program (<code class="mw-highlight mw-highlight-lang-text mw-content-ltr" style="" dir="ltr">read</code> and <code class="mw-highlight mw-highlight-lang-text mw-content-ltr" style="" dir="ltr">assign</code> have been added to highlight the similarities to the Java <code class="mw-highlight mw-highlight-lang-text mw-content-ltr" style="" dir="ltr">Box</code> call-by-sharing program <a href="#Java-box">above</a>):
</p>
<div class="mw-highlight mw-highlight-lang-c mw-content-ltr" dir="ltr"><pre><span></span><span class="cp">#include</span><span class="w"> </span><span class="cpf">&lt;stdio.h&gt;</span>

<span class="kt">int</span><span class="w"> </span><span class="nf">read</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="o">*</span><span class="n">p</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">  </span><span class="k">return</span><span class="w"> </span><span class="o">*</span><span class="n">p</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span><span class="w"> </span><span class="nf">assign</span><span class="p">(</span><span class="kt">int</span><span class="w"> </span><span class="o">*</span><span class="n">p</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="w"> </span><span class="n">v</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">  </span><span class="o">*</span><span class="n">p</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">v</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span><span class="w"> </span><span class="nf">swap</span><span class="p">(</span><span class="kt">int</span><span class="o">*</span><span class="w"> </span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="o">*</span><span class="w"> </span><span class="n">b</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">temp_storage</span><span class="p">;</span><span class="w"> </span><span class="kt">int</span><span class="o">*</span><span class="w"> </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">temp_storage</span><span class="p">;</span>
<span class="w">    </span><span class="n">assign</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span><span class="w"> </span><span class="n">read</span><span class="p">(</span><span class="n">a</span><span class="p">));</span>
<span class="w">    </span><span class="n">assign</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="n">read</span><span class="p">(</span><span class="n">b</span><span class="p">));</span>
<span class="w">    </span><span class="n">assign</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="w"> </span><span class="n">read</span><span class="p">(</span><span class="n">temp</span><span class="p">));</span>
<span class="p">}</span>

<span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">a_storage</span><span class="p">;</span><span class="w"> </span><span class="kt">int</span><span class="o">*</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">a_storage</span><span class="p">;</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">b_storage</span><span class="p">;</span><span class="w"> </span><span class="kt">int</span><span class="o">*</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="o">&amp;</span><span class="n">b_storage</span><span class="p">;</span>
<span class="w">    </span><span class="n">assign</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="w">    </span><span class="n">assign</span><span class="p">(</span><span class="n">b</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
<span class="w">    </span><span class="n">swap</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="p">);</span>
<span class="w">    </span><span class="n">printf</span><span class="p">(</span><span class="s">"%d %d"</span><span class="p">,</span><span class="w"> </span><span class="n">read</span><span class="p">(</span><span class="n">a</span><span class="p">),</span><span class="w"> </span><span class="n">read</span><span class="p">(</span><span class="n">b</span><span class="p">));</span><span class="w"> </span><span class="c1">// 2 1</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
<p>Because in this program, <code class="mw-highlight mw-highlight-lang-text mw-content-ltr" style="" dir="ltr">swap</code> operates on pointers and cannot change the pointers themselves, but only the values the pointers point to, this view holds that C's main evaluation strategy is more similar to call-by-sharing.
</p><p>C++ confuses the issue further by allowing <code class="mw-highlight mw-highlight-lang-text mw-content-ltr" style="" dir="ltr">swap</code> to be declared and used with a very lightweight "reference" syntax:<sup id="cite_ref-51" class="reference"><a href="#cite_note-51"><span class="cite-bracket">[</span>51<span class="cite-bracket">]</span></a></sup>
</p>
<div class="mw-highlight mw-highlight-lang-c++ mw-content-ltr" dir="ltr"><pre><span></span><span class="kt">void</span><span class="w"> </span><span class="nf">swap</span><span class="p">(</span><span class="kt">int</span><span class="o">&amp;</span><span class="w"> </span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="kt">int</span><span class="o">&amp;</span><span class="w"> </span><span class="n">b</span><span class="p">)</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">temp</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">a</span><span class="p">;</span>
<span class="w">    </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">b</span><span class="p">;</span>
<span class="w">    </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">temp</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span><span class="w"> </span><span class="nf">main</span><span class="p">()</span><span class="w"> </span><span class="p">{</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">1</span><span class="p">;</span>
<span class="w">    </span><span class="kt">int</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="mi">2</span><span class="p">;</span>
<span class="w">    </span><span class="n">swap</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="w"> </span><span class="n">b</span><span class="p">);</span>
<span class="w">    </span><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">a</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">b</span><span class="w"> </span><span class="o">&lt;&lt;</span><span class="w"> </span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span><span class="w"> </span><span class="c1">// 2 1</span>
<span class="w">    </span><span class="k">return</span><span class="w"> </span><span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
<p>Semantically, this is equivalent to the C examples. As such, many authors consider call-by-address to be a unique parameter passing strategy distinct from call-by-value, call-by-reference, and call-by-sharing.
</p>
<div class="mw-heading mw-heading3"><h3 id="Call_by_unification">Call by unification</h3><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=14" title="Edit section: Call by unification"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<p>In <a href="/wiki/Logic_programming" title="Logic programming">logic programming</a>, the evaluation of an expression may simply correspond to the <a href="/wiki/Unification_(computer_science)" title="Unification (computer science)">unification</a> of the terms involved combined with the application of some form of <a href="/wiki/Resolution_(logic)" title="Resolution (logic)">resolution</a>. Unification must be classified as a strict binding strategy because it is fully performed. However, unification can also be performed on unbounded variables, so calls may not necessarily commit to final values for all its variables.
</p>
<div class="mw-heading mw-heading2"><h2 id="Non-strict_binding_strategies">Non-strict binding strategies</h2><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=15" title="Edit section: Non-strict binding strategies"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<div class="mw-heading mw-heading3"><h3 id="Call_by_name">Call by name</h3><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=16" title="Edit section: Call by name"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<p>Call by name is an evaluation strategy where the arguments to a function are not evaluated before the function is called—rather, they are substituted directly into the function body (using <a href="/wiki/Capture-avoiding_substitution" class="mw-redirect" title="Capture-avoiding substitution">capture-avoiding substitution</a>) and then left to be evaluated whenever they appear in the function. If an argument is not used in the function body, the argument is never evaluated; if it is used several times, it is re-evaluated each time it appears. (See <a href="/wiki/Jensen%27s_device" title="Jensen's device">Jensen's device</a> for a programming technique that exploits this.)
</p><p>Call-by-name evaluation is occasionally preferable to call-by-value evaluation. If a function's argument is not used in the function, call by name will save time by not evaluating the argument, whereas call by value will evaluate it regardless. If the argument is a non-terminating computation, the advantage is enormous. However, when the function argument is used, call by name is often slower, requiring a mechanism such as a <a href="/wiki/Thunk_(functional_programming)#Call_by_name" class="mw-redirect" title="Thunk (functional programming)">thunk</a>.
</p><p><a href="/wiki/List_of_CLI_languages" title="List of CLI languages">.NET languages</a> can simulate call by name using delegates or <code>Expression&lt;T&gt;</code> parameters. The latter results in an <a href="/wiki/Abstract_syntax_tree" title="Abstract syntax tree">abstract syntax tree</a> being given to the function. <a href="/wiki/Eiffel_(programming_language)" title="Eiffel (programming language)">Eiffel</a> provides agents, which represent an operation to be evaluated when needed. <a href="/wiki/Seed7" title="Seed7">Seed7</a> provides call by name with function parameters. <a href="/wiki/Java_(programming_language)" title="Java (programming language)">Java</a> programs can accomplish similar lazy evaluation using <a href="/wiki/Anonymous_function" title="Anonymous function">lambda expressions</a> and the <code>java.util.function.Supplier&lt;T&gt;</code> interface.
</p>
<div class="mw-heading mw-heading3"><h3 id="Call_by_need">Call by need</h3><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=17" title="Edit section: Call by need"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<style data-mw-deduplicate="TemplateStyles:r1236090951">.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}@media print{body.ns-0 .mw-parser-output .hatnote{display:none!important}}</style><div role="note" class="hatnote navigation-not-searchable">Main article: <a href="/wiki/Lazy_evaluation" title="Lazy evaluation">Lazy evaluation</a></div>
<p>Call by need is a <a href="/wiki/Memoization" title="Memoization">memoized</a> variant of call by name, where, if the function argument is evaluated, that value is stored for subsequent use. If the argument is <a href="/wiki/Pure_function" title="Pure function">pure</a> (i.e., free of side effects), this produces the same results as call by name, saving the cost of recomputing the argument.
</p><p><a href="/wiki/Haskell" title="Haskell">Haskell</a> is a well-known language that uses call-by-need evaluation. Because evaluation of expressions may happen arbitrarily far into a computation, Haskell supports only side effects (such as <a href="/wiki/Mutable_object" class="mw-redirect" title="Mutable object">mutation</a>) via the use of <a href="/wiki/Monad_(functional_programming)" title="Monad (functional programming)">monads</a>. This eliminates any unexpected behavior from variables whose values change prior to their delayed evaluation.
</p><p>In <a href="/wiki/R_(programming_language)" title="R (programming language)">R</a>'s implementation of call by need, all arguments are passed, meaning that R allows arbitrary side effects.
</p><p><a href="/wiki/Lazy_evaluation" title="Lazy evaluation">Lazy evaluation</a> is the most common implementation of call-by-need semantics, but variations like <a href="#Optimistic_evaluation">optimistic evaluation</a> exist. <a href="/wiki/List_of_CLI_languages" title="List of CLI languages">.NET languages</a> implement call by need using the type <code>Lazy&lt;T&gt;</code>.
</p><p><a href="/wiki/Graph_reduction" title="Graph reduction">Graph reduction</a> is an efficient implementation of lazy evaluation.
</p>
<div class="mw-heading mw-heading3"><h3 id="Call_by_macro_expansion">Call by macro expansion</h3><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=18" title="Edit section: Call by macro expansion"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<p>Call by macro expansion is similar to call by name, but uses textual substitution rather than <a href="/wiki/Capture-avoiding_substitution" class="mw-redirect" title="Capture-avoiding substitution">capture-avoiding substitution</a>. Macro substitution may therefore result in variable capture, leading to mistakes and undesired behavior. <a href="/wiki/Hygienic_macros" class="mw-redirect" title="Hygienic macros">Hygienic macros</a> avoid this problem by checking for and replacing <a href="/wiki/Variable_shadowing" title="Variable shadowing">shadowed variables</a> that are not parameters.
</p>
<div class="mw-heading mw-heading3"><h3 id="Call_by_future">Call by future</h3><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=19" title="Edit section: Call by future"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<p>"Call by future", also known as "parallel call by name" or "lenient evaluation",<sup id="cite_ref-52" class="reference"><a href="#cite_note-52"><span class="cite-bracket">[</span>52<span class="cite-bracket">]</span></a></sup> is a <a href="/wiki/Concurrent_programming" class="mw-redirect" title="Concurrent programming">concurrent</a> evaluation strategy combining non-strict semantics with eager evaluation. The method requires fine-grained dynamic scheduling and synchronization but is suitable for massively parallel machines.
</p><p>The strategy creates a <a href="/wiki/Futures_and_promises" title="Futures and promises">future (promise)</a> for the function's body and each of its arguments. These futures are computed <a href="/wiki/Concurrency_(computer_science)" title="Concurrency (computer science)">concurrently</a> with the flow of the rest of the program. When a future A requires the value of another future B that has not yet been computed, future A blocks until future B finishes computing and has a value. If future B has already finished computing the value is returned immediately. Conditionals block until their condition is evaluated, and lambdas do not create futures until they are fully applied.<sup id="cite_ref-Schauser_53-0" class="reference"><a href="#cite_note-Schauser-53"><span class="cite-bracket">[</span>53<span class="cite-bracket">]</span></a></sup>
</p><p>If implemented with processes or threads, creating a future will spawn one or more new processes or threads (for the promises), accessing the value will synchronize these with the main thread, and terminating the computation of the future corresponds to killing the promises computing its value. If implemented with a <a href="/wiki/Coroutine" title="Coroutine">coroutine</a>, as in <a href="/wiki/.NET" title=".NET">.NET</a> <a href="/wiki/Async/await" title="Async/await">async/await</a>, creating a future calls a coroutine (an async function), which may yield to the caller, and in turn be yielded back to when the value is used, cooperatively multitasking.
</p><p>The strategy is non-deterministic, as the evaluation can occur at any time between creation of the future (i.e., when the expression is given) and use of the future's value. The strategy is non-strict because the function body may return a value before the arguments are evaluated. However, in most implementations, execution may still get stuck evaluating an unneeded argument. For example, the program
</p>
<div class="mw-highlight mw-highlight-lang-haskell mw-content-ltr" dir="ltr"><pre><span></span><span class="nf">f</span><span class="w"> </span><span class="n">x</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="mi">1</span><span class="o">/</span><span class="n">x</span>
<span class="nf">g</span><span class="w"> </span><span class="n">y</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="mi">1</span>
<span class="nf">main</span><span class="w"> </span><span class="ow">=</span><span class="w"> </span><span class="n">print</span><span class="w"> </span><span class="p">(</span><span class="n">g</span><span class="w"> </span><span class="p">(</span><span class="n">f</span><span class="w"> </span><span class="mi">0</span><span class="p">))</span>
</pre></div>
<p>may either have <code class="mw-highlight mw-highlight-lang-text mw-content-ltr" style="" dir="ltr">g</code> finish before <code class="mw-highlight mw-highlight-lang-text mw-content-ltr" style="" dir="ltr">f</code>, and output 1, or may result in an error due to evaluating <code class="mw-highlight mw-highlight-lang-text mw-content-ltr" style="" dir="ltr">1/0</code>.<sup id="cite_ref-Tremblay_29-3" class="reference"><a href="#cite_note-Tremblay-29"><span class="cite-bracket">[</span>29<span class="cite-bracket">]</span></a></sup>
</p><p>Call-by-future is similar to call by need in that values are computed only once. With careful handling of errors and nontermination, in particular terminating futures partway through if it is determined they will not be needed, call-by-future also has the same termination properties as call-by-need evaluation.<sup id="cite_ref-Schauser_53-1" class="reference"><a href="#cite_note-Schauser-53"><span class="cite-bracket">[</span>53<span class="cite-bracket">]</span></a></sup> However, call-by-future may perform unnecessary speculative work compared to call-by-need, such as deeply evaluating a lazy data structure.<sup id="cite_ref-Tremblay_29-4" class="reference"><a href="#cite_note-Tremblay-29"><span class="cite-bracket">[</span>29<span class="cite-bracket">]</span></a></sup> This can be avoided by using lazy futures that do not start computation until it is certain the value is needed.
</p>
<div class="mw-heading mw-heading3"><h3 id="Optimistic_evaluation">Optimistic evaluation</h3><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=20" title="Edit section: Optimistic evaluation"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<p>Optimistic evaluation is a call-by-need variant where the function's argument is partly evaluated in a call-by-value style for some amount of time (which may be adjusted at <a href="/wiki/Run_time_(program_lifecycle_phase)" class="mw-redirect" title="Run time (program lifecycle phase)">runtime</a>). After that time has passed, evaluation is aborted and the function is applied using call by need.<sup id="cite_ref-Optimistic_Evaluation_54-0" class="reference"><a href="#cite_note-Optimistic_Evaluation-54"><span class="cite-bracket">[</span>54<span class="cite-bracket">]</span></a></sup> This approach avoids some of call-by-need's runtime expenses while retaining desired termination characteristics.
</p>
<div class="mw-heading mw-heading2"><h2 id="See_also">See also</h2><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=21" title="Edit section: See also"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<ul><li><a href="/wiki/Beta_normal_form" title="Beta normal form">Beta normal form</a></li>
<li><a href="/wiki/Comparison_of_programming_languages" title="Comparison of programming languages">Comparison of programming languages</a></li>
<li><a href="/wiki/De_re_and_de_dicto" class="mw-redirect" title="De re and de dicto"><i>De re</i> and <i>de dicto</i></a></li>
<li><a href="/wiki/Eval" title="Eval">eval</a></li>
<li><a href="/wiki/Lambda_calculus" title="Lambda calculus">Lambda calculus</a></li>
<li><a href="/wiki/Call-by-push-value" title="Call-by-push-value">Call-by-push-value</a></li>
<li><a href="/wiki/Partial_evaluation" title="Partial evaluation">Partial evaluation</a></li></ul>
<div class="mw-heading mw-heading2"><h2 id="References">References</h2><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=22" title="Edit section: References"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<style data-mw-deduplicate="TemplateStyles:r1251242444">.mw-parser-output .ambox{border:1px solid #a2a9b1;border-left:10px solid #36c;background-color:#fbfbfb;box-sizing:border-box}.mw-parser-output .ambox+link+.ambox,.mw-parser-output .ambox+link+style+.ambox,.mw-parser-output .ambox+link+link+.ambox,.mw-parser-output .ambox+.mw-empty-elt+link+.ambox,.mw-parser-output .ambox+.mw-empty-elt+link+style+.ambox,.mw-parser-output .ambox+.mw-empty-elt+link+link+.ambox{margin-top:-1px}html body.mediawiki .mw-parser-output .ambox.mbox-small-left{margin:4px 1em 4px 0;overflow:hidden;width:238px;border-collapse:collapse;font-size:88%;line-height:1.25em}.mw-parser-output .ambox-speedy{border-left:10px solid #b32424;background-color:#fee7e6}.mw-parser-output .ambox-delete{border-left:10px solid #b32424}.mw-parser-output .ambox-content{border-left:10px solid #f28500}.mw-parser-output .ambox-style{border-left:10px solid #fc3}.mw-parser-output .ambox-move{border-left:10px solid #9932cc}.mw-parser-output .ambox-protection{border-left:10px solid #a2a9b1}.mw-parser-output .ambox .mbox-text{border:none;padding:0.25em 0.5em;width:100%}.mw-parser-output .ambox .mbox-image{border:none;padding:2px 0 2px 0.5em;text-align:center}.mw-parser-output .ambox .mbox-imageright{border:none;padding:2px 0.5em 2px 0;text-align:center}.mw-parser-output .ambox .mbox-empty-cell{border:none;padding:0;width:1px}.mw-parser-output .ambox .mbox-image-div{width:52px}@media(min-width:720px){.mw-parser-output .ambox{margin:0 10%}}@media print{body.ns-0 .mw-parser-output .ambox{display:none!important}}</style><table class="box-More_footnotes_needed plainlinks metadata ambox ambox-style ambox-More_footnotes_needed" role="presentation"><tbody><tr><td class="mbox-image"><div class="mbox-image-div"><span typeof="mw:File"><span><img alt="" src="//upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/40px-Text_document_with_red_question_mark.svg.png" decoding="async" width="40" height="40" class="mw-file-element" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/60px-Text_document_with_red_question_mark.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/a/a4/Text_document_with_red_question_mark.svg/80px-Text_document_with_red_question_mark.svg.png 2x" data-file-width="48" data-file-height="48"></span></span></div></td><td class="mbox-text"><div class="mbox-text-span">This article includes a list of <a href="/wiki/Wikipedia:Citing_sources#General_references" title="Wikipedia:Citing sources">general references</a>, but <b>it lacks sufficient corresponding <a href="/wiki/Wikipedia:Citing_sources#Inline_citations" title="Wikipedia:Citing sources">inline citations</a></b>.<span class="hide-when-compact"> Please help to <a href="/wiki/Wikipedia:WikiProject_Reliability" title="Wikipedia:WikiProject Reliability">improve</a> this article by <a href="/wiki/Wikipedia:When_to_cite" title="Wikipedia:When to cite">introducing</a> more precise citations.</span>  <span class="date-container"><i>(<span class="date">April 2012</span>)</i></span><span class="hide-when-compact"><i> (<small><a href="/wiki/Help:Maintenance_template_removal" title="Help:Maintenance template removal">Learn how and when to remove this message</a></small>)</i></span></div></td></tr></tbody></table>
<style data-mw-deduplicate="TemplateStyles:r1239543626">.mw-parser-output .reflist{margin-bottom:0.5em;list-style-type:decimal}@media screen{.mw-parser-output .reflist{font-size:90%}}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}</style><div class="reflist">
<div class="mw-references-wrap mw-references-columns"><ol class="references">
<li id="cite_note-1"><span class="mw-cite-backlink"><b><a href="#cite_ref-1">^</a></b></span> <span class="reference-text"><style data-mw-deduplicate="TemplateStyles:r1238218222">.mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free.id-lock-free a{background:url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited.id-lock-limited a,.mw-parser-output .id-lock-registration.id-lock-registration a{background:url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription.id-lock-subscription a{background:url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .id-lock-free a,body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .id-lock-limited a,body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .id-lock-registration a,body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .id-lock-subscription a,body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .cs1-ws-icon a{background-size:contain;padding:0 1em 0 0}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:var(--color-error,#d33)}.mw-parser-output .cs1-visible-error{color:var(--color-error,#d33)}.mw-parser-output .cs1-maint{display:none;color:#085;margin-left:0.3em}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}@media screen{.mw-parser-output .cs1-format{font-size:95%}html.skin-theme-clientpref-night .mw-parser-output .cs1-maint{color:#18911f}}@media screen and (prefers-color-scheme:dark){html.skin-theme-clientpref-os .mw-parser-output .cs1-maint{color:#18911f}}</style><cite id="CITEREFArakiNishizaki2014" class="citation book cs1">Araki, Shota; Nishizaki, Shin-ya (November 2014). "Call-by-name evaluation of RPC and RMI calculi". <a rel="nofollow" class="external text" href="https://books.google.com/books?id=MFMCCwAAQBAJ&amp;pg=PA1"><i>Theory and Practice of Computation</i></a>. p.&nbsp;1. <a href="/wiki/Doi_(identifier)" class="mw-redirect" title="Doi (identifier)">doi</a>:<a rel="nofollow" class="external text" href="https://doi.org/10.1142%2F9789814612883_0001">10.1142/9789814612883_0001</a>. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/978-981-4612-87-6" title="Special:BookSources/978-981-4612-87-6"><bdi>978-981-4612-87-6</bdi></a><span class="reference-accessdate">. Retrieved <span class="nowrap">21 August</span> 2021</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.atitle=Call-by-name+evaluation+of+RPC+and+RMI+calculi&amp;rft.btitle=Theory+and+Practice+of+Computation&amp;rft.pages=1&amp;rft.date=2014-11&amp;rft_id=info%3Adoi%2F10.1142%2F9789814612883_0001&amp;rft.isbn=978-981-4612-87-6&amp;rft.aulast=Araki&amp;rft.aufirst=Shota&amp;rft.au=Nishizaki%2C+Shin-ya&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DMFMCCwAAQBAJ%26pg%3DPA1&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-2"><span class="mw-cite-backlink"><b><a href="#cite_ref-2">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFTurbakGifford2008" class="citation book cs1">Turbak, Franklyn; Gifford, David (18 July 2008). <a rel="nofollow" class="external text" href="https://books.google.com/books?id=9yw3AgAAQBAJ&amp;pg=PA309"><i>Design Concepts in Programming Languages</i></a>. MIT Press. p.&nbsp;309. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/978-0-262-30315-6" title="Special:BookSources/978-0-262-30315-6"><bdi>978-0-262-30315-6</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Design+Concepts+in+Programming+Languages&amp;rft.pages=309&amp;rft.pub=MIT+Press&amp;rft.date=2008-07-18&amp;rft.isbn=978-0-262-30315-6&amp;rft.aulast=Turbak&amp;rft.aufirst=Franklyn&amp;rft.au=Gifford%2C+David&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3D9yw3AgAAQBAJ%26pg%3DPA309&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-3"><span class="mw-cite-backlink"><b><a href="#cite_ref-3">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFCrankFelleisen1991" class="citation conference cs1">Crank, Erik; Felleisen, Matthias (1991). "Parameter-passing and the lambda calculus". <i>Proceedings of the 18th ACM SIGPLAN-SIGACT symposium on Principles of programming languages - POPL '91</i>. p.&nbsp;2. <a href="/wiki/CiteSeerX_(identifier)" class="mw-redirect" title="CiteSeerX (identifier)">CiteSeerX</a>&nbsp;<span class="id-lock-free" title="Freely accessible"><a rel="nofollow" class="external text" href="https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.23.4385">10.1.1.23.4385</a></span>. <a href="/wiki/Doi_(identifier)" class="mw-redirect" title="Doi (identifier)">doi</a>:<a rel="nofollow" class="external text" href="https://doi.org/10.1145%2F99583.99616">10.1145/99583.99616</a>. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/0897914198" title="Special:BookSources/0897914198"><bdi>0897914198</bdi></a>. <a href="/wiki/S2CID_(identifier)" class="mw-redirect" title="S2CID (identifier)">S2CID</a>&nbsp;<a rel="nofollow" class="external text" href="https://api.semanticscholar.org/CorpusID:5782416">5782416</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=conference&amp;rft.atitle=Parameter-passing+and+the+lambda+calculus&amp;rft.btitle=Proceedings+of+the+18th+ACM+SIGPLAN-SIGACT+symposium+on+Principles+of+programming+languages+-+POPL+%2791&amp;rft.pages=2&amp;rft.date=1991&amp;rft_id=https%3A%2F%2Fciteseerx.ist.psu.edu%2Fviewdoc%2Fsummary%3Fdoi%3D10.1.1.23.4385%23id-name%3DCiteSeerX&amp;rft_id=https%3A%2F%2Fapi.semanticscholar.org%2FCorpusID%3A5782416%23id-name%3DS2CID&amp;rft_id=info%3Adoi%2F10.1145%2F99583.99616&amp;rft.isbn=0897914198&amp;rft.aulast=Crank&amp;rft.aufirst=Erik&amp;rft.au=Felleisen%2C+Matthias&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-Wilhelm-4"><span class="mw-cite-backlink">^ <a href="#cite_ref-Wilhelm_4-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Wilhelm_4-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-Wilhelm_4-2"><sup><i><b>c</b></i></sup></a></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFWilhelmSeidl2010" class="citation book cs1">Wilhelm, Reinhard; Seidl, Helmut (10 November 2010). <a rel="nofollow" class="external text" href="https://books.google.com/books?id=kDYueCmZLboC&amp;pg=PA61"><i>Compiler Design: Virtual Machines</i></a>. Springer Science &amp; Business Media. p.&nbsp;61. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/978-3-642-14909-2" title="Special:BookSources/978-3-642-14909-2"><bdi>978-3-642-14909-2</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Compiler+Design%3A+Virtual+Machines&amp;rft.pages=61&amp;rft.pub=Springer+Science+%26+Business+Media&amp;rft.date=2010-11-10&amp;rft.isbn=978-3-642-14909-2&amp;rft.aulast=Wilhelm&amp;rft.aufirst=Reinhard&amp;rft.au=Seidl%2C+Helmut&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DkDYueCmZLboC%26pg%3DPA61&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-5"><span class="mw-cite-backlink"><b><a href="#cite_ref-5">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFNitaMihailescu2017" class="citation book cs1">Nita, Stefania Loredana; Mihailescu, Marius (2017). <a rel="nofollow" class="external text" href="https://books.google.com/books?id=ydo1DwAAQBAJ&amp;pg=PA3">"Introduction"</a>. <i>Practical Concurrent Haskell</i>. p.&nbsp;3. <a href="/wiki/Doi_(identifier)" class="mw-redirect" title="Doi (identifier)">doi</a>:<a rel="nofollow" class="external text" href="https://doi.org/10.1007%2F978-1-4842-2781-7_1">10.1007/978-1-4842-2781-7_1</a>. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/978-1-4842-2780-0" title="Special:BookSources/978-1-4842-2780-0"><bdi>978-1-4842-2780-0</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.atitle=Introduction&amp;rft.btitle=Practical+Concurrent+Haskell&amp;rft.pages=3&amp;rft.date=2017&amp;rft_id=info%3Adoi%2F10.1007%2F978-1-4842-2781-7_1&amp;rft.isbn=978-1-4842-2780-0&amp;rft.aulast=Nita&amp;rft.aufirst=Stefania+Loredana&amp;rft.au=Mihailescu%2C+Marius&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3Dydo1DwAAQBAJ%26pg%3DPA3&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-Pierce-6"><span class="mw-cite-backlink"><b><a href="#cite_ref-Pierce_6-0">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFPierce2002" class="citation book cs1"><a href="/wiki/Benjamin_C._Pierce" title="Benjamin C. Pierce">Pierce, Benjamin C.</a> (2002). <a rel="nofollow" class="external text" href="https://books.google.com/books?id=ti6zoAC9Ph8C&amp;pg=PA56"><i>Types and Programming Languages</i></a>. <a href="/wiki/MIT_Press" title="MIT Press">MIT Press</a>. p.&nbsp;56. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/0-262-16209-1" title="Special:BookSources/0-262-16209-1"><bdi>0-262-16209-1</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Types+and+Programming+Languages&amp;rft.pages=56&amp;rft.pub=MIT+Press&amp;rft.date=2002&amp;rft.isbn=0-262-16209-1&amp;rft.aulast=Pierce&amp;rft.aufirst=Benjamin+C.&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3Dti6zoAC9Ph8C%26pg%3DPA56&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-7"><span class="mw-cite-backlink"><b><a href="#cite_ref-7">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFDaniel_P._FriedmanMitchell_Wand2008" class="citation book cs1">Daniel P. Friedman; Mitchell Wand (2008). <i>Essentials of Programming Languages</i> (third&nbsp;ed.). Cambridge, MA: <a href="/wiki/MIT_Press" title="MIT Press">The MIT Press</a>. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/978-0262062794" title="Special:BookSources/978-0262062794"><bdi>978-0262062794</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Essentials+of+Programming+Languages&amp;rft.place=Cambridge%2C+MA&amp;rft.edition=third&amp;rft.pub=The+MIT+Press&amp;rft.date=2008&amp;rft.isbn=978-0262062794&amp;rft.au=Daniel+P.+Friedman&amp;rft.au=Mitchell+Wand&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-Pragmatics-8"><span class="mw-cite-backlink">^ <a href="#cite_ref-Pragmatics_8-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Pragmatics_8-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFScott2016" class="citation book cs1">Scott, Michael Lee (2016). <i>Programming language pragmatics</i> (Fourth&nbsp;ed.). Waltham, MA: Elsevier. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/9780124104778" title="Special:BookSources/9780124104778"><bdi>9780124104778</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Programming+language+pragmatics&amp;rft.place=Waltham%2C+MA&amp;rft.edition=Fourth&amp;rft.pub=Elsevier&amp;rft.date=2016&amp;rft.isbn=9780124104778&amp;rft.aulast=Scott&amp;rft.aufirst=Michael+Lee&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-9"><span class="mw-cite-backlink"><b><a href="#cite_ref-9">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFKernighanRitchie1988" class="citation book cs1">Kernighan, Brian W.; Ritchie, Dennis M. (1988). <i>The C programming language</i> (2nd&nbsp;ed.). Englewood Cliffs, N.J: Prentice Hall. p.&nbsp;28. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/978-0131103627" title="Special:BookSources/978-0131103627"><bdi>978-0131103627</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=The+C+programming+language&amp;rft.place=Englewood+Cliffs%2C+N.J&amp;rft.pages=28&amp;rft.edition=2nd&amp;rft.pub=Prentice+Hall&amp;rft.date=1988&amp;rft.isbn=978-0131103627&amp;rft.aulast=Kernighan&amp;rft.aufirst=Brian+W.&amp;rft.au=Ritchie%2C+Dennis+M.&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-10"><span class="mw-cite-backlink"><b><a href="#cite_ref-10">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite class="citation web cs1"><a rel="nofollow" class="external text" href="https://www.mathworks.com/help/matlab/matlab_prog/avoid-unnecessary-copies-of-data.html#:~:text=MATLAB%20uses%20pass-by-value%20semantics%20when%20passing%20arguments%20to%20functions%20and%20returning%20values%20from%20functions.%20In%20some%20cases,%20pass-by-value%20results%20in%20copies%20of%20the%20original%20values%20being%20made%20in%20the%20called%20function.">"Avoid Unnecessary Copies of Data - MATLAB &amp; Simulink"</a>. <i>www.mathworks.com</i><span class="reference-accessdate">. Retrieved <span class="nowrap">2023-01-28</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=www.mathworks.com&amp;rft.atitle=Avoid+Unnecessary+Copies+of+Data+-+MATLAB+%26+Simulink&amp;rft_id=https%3A%2F%2Fwww.mathworks.com%2Fhelp%2Fmatlab%2Fmatlab_prog%2Favoid-unnecessary-copies-of-data.html%23%3A~%3Atext%3DMATLAB%2520uses%2520pass-by-value%2520semantics%2520when%2520passing%2520arguments%2520to%2520functions%2520and%2520returning%2520values%2520from%2520functions.%2520In%2520some%2520cases%2C%2520pass-by-value%2520results%2520in%2520copies%2520of%2520the%2520original%2520values%2520being%2520made%2520in%2520the%2520called%2520function.&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-11"><span class="mw-cite-backlink"><b><a href="#cite_ref-11">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFHasti" class="citation web cs1">Hasti, Rebecca. <a rel="nofollow" class="external text" href="http://pages.cs.wisc.edu/~fischer/cs536.s08/course.hold/html/NOTES/9.PARAMETER-PASSING.html#valueResult">"Parameter Passing"</a>. <i>CS 536: Introduction to Programming Languages and Compilers</i>. University of Wisconsin<span class="reference-accessdate">. Retrieved <span class="nowrap">22 August</span> 2021</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=CS+536%3A+Introduction+to+Programming+Languages+and+Compilers&amp;rft.atitle=Parameter+Passing&amp;rft.aulast=Hasti&amp;rft.aufirst=Rebecca&amp;rft_id=http%3A%2F%2Fpages.cs.wisc.edu%2F~fischer%2Fcs536.s08%2Fcourse.hold%2Fhtml%2FNOTES%2F9.PARAMETER-PASSING.html%23valueResult&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-Robinson.1965-12"><span class="mw-cite-backlink"><b><a href="#cite_ref-Robinson.1965_12-0">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFJ.A._Robinson1965" class="citation journal cs1">J.A. Robinson (Jan 1965). <a rel="nofollow" class="external text" href="https://doi.org/10.1145%2F321250.321253">"A Machine-Oriented Logic Based on the Resolution Principle"</a>. <i>Journal of the ACM</i>. <b>12</b> (1): <span class="nowrap">23–</span>41. <a href="/wiki/Doi_(identifier)" class="mw-redirect" title="Doi (identifier)">doi</a>:<span class="id-lock-free" title="Freely accessible"><a rel="nofollow" class="external text" href="https://doi.org/10.1145%2F321250.321253">10.1145/321250.321253</a></span>. <a href="/wiki/S2CID_(identifier)" class="mw-redirect" title="S2CID (identifier)">S2CID</a>&nbsp;<a rel="nofollow" class="external text" href="https://api.semanticscholar.org/CorpusID:14389185">14389185</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Journal+of+the+ACM&amp;rft.atitle=A+Machine-Oriented+Logic+Based+on+the+Resolution+Principle&amp;rft.volume=12&amp;rft.issue=1&amp;rft.pages=23-41&amp;rft.date=1965-01&amp;rft_id=info%3Adoi%2F10.1145%2F321250.321253&amp;rft_id=https%3A%2F%2Fapi.semanticscholar.org%2FCorpusID%3A14389185%23id-name%3DS2CID&amp;rft.au=J.A.+Robinson&amp;rft_id=https%3A%2F%2Fdoi.org%2F10.1145%252F321250.321253&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span>; Here: sect.5.8, p.32</span>
</li>
<li id="cite_note-13"><span class="mw-cite-backlink"><b><a href="#cite_ref-13">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFJ.A._Robinson1971" class="citation journal cs1">J.A. Robinson (1971). <a rel="nofollow" class="external text" href="https://aitopics.org/download/classics:E35191E8">"Computational logic: The unification computation"</a>. <i>Machine Intelligence</i>. <b>6</b>: <span class="nowrap">63–</span>72.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Machine+Intelligence&amp;rft.atitle=Computational+logic%3A+The+unification+computation&amp;rft.volume=6&amp;rft.pages=63-72&amp;rft.date=1971&amp;rft.au=J.A.+Robinson&amp;rft_id=https%3A%2F%2Faitopics.org%2Fdownload%2Fclassics%3AE35191E8&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-14"><span class="mw-cite-backlink"><b><a href="#cite_ref-14">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFBundyWallen1984" class="citation book cs1">Bundy, Alan; Wallen, Lincoln (1984). "SASL". <i>Catalogue of Artificial Intelligence Tools</i>. p.&nbsp;117. <a href="/wiki/Doi_(identifier)" class="mw-redirect" title="Doi (identifier)">doi</a>:<a rel="nofollow" class="external text" href="https://doi.org/10.1007%2F978-3-642-96868-6_222">10.1007/978-3-642-96868-6_222</a>. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/978-3-540-13938-6" title="Special:BookSources/978-3-540-13938-6"><bdi>978-3-540-13938-6</bdi></a>. <q>Was probably the first language to systematically exploit the power of lazy evaluation.</q></cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.atitle=SASL&amp;rft.btitle=Catalogue+of+Artificial+Intelligence+Tools&amp;rft.pages=117&amp;rft.date=1984&amp;rft_id=info%3Adoi%2F10.1007%2F978-3-642-96868-6_222&amp;rft.isbn=978-3-540-13938-6&amp;rft.aulast=Bundy&amp;rft.aufirst=Alan&amp;rft.au=Wallen%2C+Lincoln&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-15"><span class="mw-cite-backlink"><b><a href="#cite_ref-15">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFFay2018" class="citation web cs1">Fay, Colin (30 July 2018). <a rel="nofollow" class="external text" href="https://www.r-bloggers.com/2018/07/about-lazy-evaluation/">"About lazy evaluation"</a>. <i>R-bloggers</i><span class="reference-accessdate">. Retrieved <span class="nowrap">21 August</span> 2021</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=R-bloggers&amp;rft.atitle=About+lazy+evaluation&amp;rft.date=2018-07-30&amp;rft.aulast=Fay&amp;rft.aufirst=Colin&amp;rft_id=https%3A%2F%2Fwww.r-bloggers.com%2F2018%2F07%2Fabout-lazy-evaluation%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-16"><span class="mw-cite-backlink"><b><a href="#cite_ref-16">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFWadsworth1971" class="citation thesis cs1">Wadsworth, Christopher P. (1971). <i>Semantics and Pragmatics of the Lambda Calculus</i> (PhD). Oxford University.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Adissertation&amp;rft.title=Semantics+and+Pragmatics+of+the+Lambda+Calculus&amp;rft.inst=Oxford+University&amp;rft.date=1971&amp;rft.aulast=Wadsworth&amp;rft.aufirst=Christopher+P.&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-CLU_Reference_Manual-17"><span class="mw-cite-backlink">^ <a href="#cite_ref-CLU_Reference_Manual_17-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-CLU_Reference_Manual_17-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-CLU_Reference_Manual_17-2"><sup><i><b>c</b></i></sup></a> <a href="#cite_ref-CLU_Reference_Manual_17-3"><sup><i><b>d</b></i></sup></a> <a href="#cite_ref-CLU_Reference_Manual_17-4"><sup><i><b>e</b></i></sup></a></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFLiskovAtkinsonBloomMoss1979" class="citation web cs1">Liskov, Barbara; Atkinson, Russ; Bloom, Toby; Moss, Eliot; Schaffert, Craig; Scheifler, Craig; Snyder, Alan (October 1979). <a rel="nofollow" class="external text" href="http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-225.pdf">"CLU Reference Manual"</a> <span class="cs1-format">(PDF)</span>. <i>Laboratory for Computer Science</i>. Massachusetts Institute of Technology. pp.&nbsp;<span class="nowrap">14–</span>15. <a rel="nofollow" class="external text" href="https://web.archive.org/web/20060922165201/http://www.lcs.mit.edu/publications/pubs/pdf/MIT-LCS-TR-225.pdf">Archived</a> <span class="cs1-format">(PDF)</span> from the original on 2006-09-22<span class="reference-accessdate">. Retrieved <span class="nowrap">2011-05-19</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=Laboratory+for+Computer+Science&amp;rft.atitle=CLU+Reference+Manual&amp;rft.pages=14-15&amp;rft.date=1979-10&amp;rft.aulast=Liskov&amp;rft.aufirst=Barbara&amp;rft.au=Atkinson%2C+Russ&amp;rft.au=Bloom%2C+Toby&amp;rft.au=Moss%2C+Eliot&amp;rft.au=Schaffert%2C+Craig&amp;rft.au=Scheifler%2C+Craig&amp;rft.au=Snyder%2C+Alan&amp;rft_id=http%3A%2F%2Fwww.lcs.mit.edu%2Fpublications%2Fpubs%2Fpdf%2FMIT-LCS-TR-225.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-18"><span class="mw-cite-backlink"><b><a href="#cite_ref-18">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite class="citation web cs1"><a rel="nofollow" class="external text" href="https://www.php.net/manual/en/language.references.pass.php">"PHP: Passing by Reference - Manual"</a>. <i>www.php.net</i><span class="reference-accessdate">. Retrieved <span class="nowrap">2021-07-04</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=www.php.net&amp;rft.atitle=PHP%3A+Passing+by+Reference+-+Manual&amp;rft_id=https%3A%2F%2Fwww.php.net%2Fmanual%2Fen%2Flanguage.references.pass.php&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-19"><span class="mw-cite-backlink"><b><a href="#cite_ref-19">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFWagner2023" class="citation web cs1">Wagner, Bill (12 April 2023). <a rel="nofollow" class="external text" href="https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/method-parameters">"Passing Parameters - C# Programming Guide"</a>. <i><a href="/wiki/Microsoft_Docs" title="Microsoft Docs">Microsoft Docs</a></i><span class="reference-accessdate">. Retrieved <span class="nowrap">2023-09-10</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=Microsoft+Docs&amp;rft.atitle=Passing+Parameters+-+C%23+Programming+Guide&amp;rft.date=2023-04-12&amp;rft.aulast=Wagner&amp;rft.aufirst=Bill&amp;rft_id=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fdotnet%2Fcsharp%2Flanguage-reference%2Fkeywords%2Fmethod-parameters&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-20"><span class="mw-cite-backlink"><b><a href="#cite_ref-20">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFDollard2021" class="citation web cs1">Dollard, Kathleen (15 September 2021). <a rel="nofollow" class="external text" href="https://learn.microsoft.com/en-us/dotnet/visual-basic/programming-guide/language-features/procedures/passing-arguments-by-value-and-by-reference">"Passing Arguments by Value and by Reference - Visual Basic"</a>. <i><a href="/wiki/Microsoft_Docs" title="Microsoft Docs">Microsoft Docs</a></i><span class="reference-accessdate">. Retrieved <span class="nowrap">2023-09-10</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=Microsoft+Docs&amp;rft.atitle=Passing+Arguments+by+Value+and+by+Reference+-+Visual+Basic&amp;rft.date=2021-09-15&amp;rft.aulast=Dollard&amp;rft.aufirst=Kathleen&amp;rft_id=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fdotnet%2Fvisual-basic%2Fprogramming-guide%2Flanguage-features%2Fprocedures%2Fpassing-arguments-by-value-and-by-reference&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-CPPHist-21"><span class="mw-cite-backlink">^ <a href="#cite_ref-CPPHist_21-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-CPPHist_21-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite class="citation web cs1"><a rel="nofollow" class="external text" href="https://en.cppreference.com/w/cpp/language/history">"History of C++"</a>. <i>en.cppreference.com</i><span class="reference-accessdate">. Retrieved <span class="nowrap">11 June</span> 2022</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=en.cppreference.com&amp;rft.atitle=History+of+C%2B%2B&amp;rft_id=https%3A%2F%2Fen.cppreference.com%2Fw%2Fcpp%2Flanguage%2Fhistory&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-22"><span class="mw-cite-backlink"><b><a href="#cite_ref-22">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFFilipek2021" class="citation web cs1">Filipek, Bartlomiej (16 August 2021). <a rel="nofollow" class="external text" href="https://www.cppstories.com/2021/evaluation-order-cpp17/">"Stricter Expression Evaluation Order in C++17"</a>. <i>C++ Stories</i><span class="reference-accessdate">. Retrieved <span class="nowrap">24 August</span> 2021</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=C%2B%2B+Stories&amp;rft.atitle=Stricter+Expression+Evaluation+Order+in+C%2B%2B17&amp;rft.date=2021-08-16&amp;rft.aulast=Filipek&amp;rft.aufirst=Bartlomiej&amp;rft_id=https%3A%2F%2Fwww.cppstories.com%2F2021%2Fevaluation-order-cpp17%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-SICP-23"><span class="mw-cite-backlink">^ <a href="#cite_ref-SICP_23-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-SICP_23-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFAbelsonSussman1996" class="citation book cs1"><a href="/wiki/Hal_Abelson" title="Hal Abelson">Abelson, Harold</a>; <a href="/wiki/Gerald_Jay_Sussman" title="Gerald Jay Sussman">Sussman, Gerald Jay</a> (1996). <a rel="nofollow" class="external text" href="https://web.archive.org/web/20050302014035/http://mitpress.mit.edu/sicp/full-text/book/book.html">"Normal Order and Applicative Order"</a>. <a rel="nofollow" class="external text" href="http://mitpress.mit.edu/sicp/full-text/book/book.html"><i>Structure and interpretation of computer programs</i></a> (2nd&nbsp;ed.). Cambridge, Massachusetts: <a href="/wiki/MIT_Press" title="MIT Press">MIT Press</a>. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/0-262-01153-0" title="Special:BookSources/0-262-01153-0"><bdi>0-262-01153-0</bdi></a>. Archived from <a rel="nofollow" class="external text" href="https://mitpress.mit.edu/sites/default/files/sicp/full-text/book/book-Z-H-27.html#%_sec_4.2.1">the original</a> on 2005-03-02<span class="reference-accessdate">. Retrieved <span class="nowrap">2006-03-06</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.atitle=Normal+Order+and+Applicative+Order&amp;rft.btitle=Structure+and+interpretation+of+computer+programs&amp;rft.place=Cambridge%2C+Massachusetts&amp;rft.edition=2nd&amp;rft.pub=MIT+Press&amp;rft.date=1996&amp;rft.isbn=0-262-01153-0&amp;rft.aulast=Abelson&amp;rft.aufirst=Harold&amp;rft.au=Sussman%2C+Gerald+Jay&amp;rft_id=https%3A%2F%2Fmitpress.mit.edu%2Fsites%2Fdefault%2Ffiles%2Fsicp%2Ffull-text%2Fbook%2Fbook-Z-H-27.html%23%25_sec_4.2.1&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span> See also footnote Temp 576.</span>
</li>
<li id="cite_note-24"><span class="mw-cite-backlink"><b><a href="#cite_ref-24">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFReese2015" class="citation book cs1">Reese, Richard M. (14 October 2015). <a rel="nofollow" class="external text" href="https://books.google.com/books?id=cgKACwAAQBAJ&amp;pg=PA106"><i>Learning Java Functional Programming</i></a>. Packt Publishing Ltd. p.&nbsp;106. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/978-1-78528-935-4" title="Special:BookSources/978-1-78528-935-4"><bdi>978-1-78528-935-4</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Learning+Java+Functional+Programming&amp;rft.pages=106&amp;rft.pub=Packt+Publishing+Ltd&amp;rft.date=2015-10-14&amp;rft.isbn=978-1-78528-935-4&amp;rft.aulast=Reese&amp;rft.aufirst=Richard+M.&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DcgKACwAAQBAJ%26pg%3DPA106&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-25"><span class="mw-cite-backlink"><b><a href="#cite_ref-25">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFAntaniTimmsMantyla2016" class="citation book cs1">Antani, Ved; Timms, Simon; Mantyla, Dan (31 August 2016). <a rel="nofollow" class="external text" href="https://books.google.com/books?id=n23WDQAAQBAJ&amp;pg=PA614"><i>JavaScript: Functional Programming for JavaScript Developers</i></a>. Packt Publishing Ltd. p.&nbsp;614. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/978-1-78712-557-5" title="Special:BookSources/978-1-78712-557-5"><bdi>978-1-78712-557-5</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=JavaScript%3A+Functional+Programming+for+JavaScript+Developers&amp;rft.pages=614&amp;rft.pub=Packt+Publishing+Ltd&amp;rft.date=2016-08-31&amp;rft.isbn=978-1-78712-557-5&amp;rft.aulast=Antani&amp;rft.aufirst=Ved&amp;rft.au=Timms%2C+Simon&amp;rft.au=Mantyla%2C+Dan&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3Dn23WDQAAQBAJ%26pg%3DPA614&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-26"><span class="mw-cite-backlink"><b><a href="#cite_ref-26">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFSeacord" class="citation web cs1">Seacord, Robert C. <a rel="nofollow" class="external text" href="https://wiki.sei.cmu.edu/confluence/display/c/EXP30-C.+Do+not+depend+on+the+order+of+evaluation+for+side+effects">"EXP30-C. Do not depend on the order of evaluation for side effects"</a>. <i>SEI CERT C Coding Standard</i>. Carnegie Mellon University<span class="reference-accessdate">. Retrieved <span class="nowrap">23 August</span> 2021</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=SEI+CERT+C+Coding+Standard&amp;rft.atitle=EXP30-C.+Do+not+depend+on+the+order+of+evaluation+for+side+effects&amp;rft.aulast=Seacord&amp;rft.aufirst=Robert+C.&amp;rft_id=https%3A%2F%2Fwiki.sei.cmu.edu%2Fconfluence%2Fdisplay%2Fc%2FEXP30-C.%2BDo%2Bnot%2Bdepend%2Bon%2Bthe%2Border%2Bof%2Bevaluation%2Bfor%2Bside%2Beffects&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-27"><span class="mw-cite-backlink"><b><a href="#cite_ref-27">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFAngladeLacrampeQueinnec1994" class="citation journal cs1">Anglade, S.; Lacrampe, J. J.; Queinnec, C. (October 1994). <a rel="nofollow" class="external text" href="https://pages.lip6.fr/Christian.Queinnec/PDF/orleans.pdf">"Semantics of combinations in scheme"</a> <span class="cs1-format">(PDF)</span>. <i>ACM SIGPLAN Lisp Pointers</i>. <b>VII</b> (4): <span class="nowrap">15–</span>20. <a href="/wiki/Doi_(identifier)" class="mw-redirect" title="Doi (identifier)">doi</a>:<a rel="nofollow" class="external text" href="https://doi.org/10.1145%2F382109.382669">10.1145/382109.382669</a>. <a href="/wiki/S2CID_(identifier)" class="mw-redirect" title="S2CID (identifier)">S2CID</a>&nbsp;<a rel="nofollow" class="external text" href="https://api.semanticscholar.org/CorpusID:2987427">2987427</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=ACM+SIGPLAN+Lisp+Pointers&amp;rft.atitle=Semantics+of+combinations+in+scheme&amp;rft.volume=VII&amp;rft.issue=4&amp;rft.pages=15-20&amp;rft.date=1994-10&amp;rft_id=info%3Adoi%2F10.1145%2F382109.382669&amp;rft_id=https%3A%2F%2Fapi.semanticscholar.org%2FCorpusID%3A2987427%23id-name%3DS2CID&amp;rft.aulast=Anglade&amp;rft.aufirst=S.&amp;rft.au=Lacrampe%2C+J.+J.&amp;rft.au=Queinnec%2C+C.&amp;rft_id=https%3A%2F%2Fpages.lip6.fr%2FChristian.Queinnec%2FPDF%2Forleans.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-28"><span class="mw-cite-backlink"><b><a href="#cite_ref-28">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite class="citation web cs1"><a rel="nofollow" class="external text" href="https://discuss.ocaml.org/t/why-are-ocaml-function-arguments-evaluated-right-to-left/1214">"Why are OCaml function arguments evaluated right-to-left?"</a>. <i>OCaml</i>. 30 November 2017.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=OCaml&amp;rft.atitle=Why+are+OCaml+function+arguments+evaluated+right-to-left%3F&amp;rft.date=2017-11-30&amp;rft_id=https%3A%2F%2Fdiscuss.ocaml.org%2Ft%2Fwhy-are-ocaml-function-arguments-evaluated-right-to-left%2F1214&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-Tremblay-29"><span class="mw-cite-backlink">^ <a href="#cite_ref-Tremblay_29-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Tremblay_29-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-Tremblay_29-2"><sup><i><b>c</b></i></sup></a> <a href="#cite_ref-Tremblay_29-3"><sup><i><b>d</b></i></sup></a> <a href="#cite_ref-Tremblay_29-4"><sup><i><b>e</b></i></sup></a></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFTremblay2000" class="citation journal cs1">Tremblay, G. (April 2000). "Lenient evaluation is neither strict nor lazy". <i>Computer Languages</i>. <b>26</b> (1): <span class="nowrap">43–</span>66. <a href="/wiki/CiteSeerX_(identifier)" class="mw-redirect" title="CiteSeerX (identifier)">CiteSeerX</a>&nbsp;<span class="id-lock-free" title="Freely accessible"><a rel="nofollow" class="external text" href="https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.137.9885">10.1.1.137.9885</a></span>. <a href="/wiki/Doi_(identifier)" class="mw-redirect" title="Doi (identifier)">doi</a>:<a rel="nofollow" class="external text" href="https://doi.org/10.1016%2FS0096-0551%2801%2900006-6">10.1016/S0096-0551(01)00006-6</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Computer+Languages&amp;rft.atitle=Lenient+evaluation+is+neither+strict+nor+lazy&amp;rft.volume=26&amp;rft.issue=1&amp;rft.pages=43-66&amp;rft.date=2000-04&amp;rft_id=https%3A%2F%2Fciteseerx.ist.psu.edu%2Fviewdoc%2Fsummary%3Fdoi%3D10.1.1.137.9885%23id-name%3DCiteSeerX&amp;rft_id=info%3Adoi%2F10.1016%2FS0096-0551%2801%2900006-6&amp;rft.aulast=Tremblay&amp;rft.aufirst=G.&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-30"><span class="mw-cite-backlink"><b><a href="#cite_ref-30">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFGeorge1987" class="citation thesis cs1">George, Lai (March 1987). <a rel="nofollow" class="external text" href="https://collections.lib.utah.edu/ark:/87278/s6j69gxv/94159"><i>Efficient evaluation of normal order through strictness information</i></a> (MSc). University of Utah. p.&nbsp;10.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Adissertation&amp;rft.title=Efficient+evaluation+of+normal+order+through+strictness+information&amp;rft.inst=University+of+Utah&amp;rft.date=1987-03&amp;rft.aulast=George&amp;rft.aufirst=Lai&amp;rft_id=https%3A%2F%2Fcollections.lib.utah.edu%2Fark%3A%2F87278%2Fs6j69gxv%2F94159&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-31"><span class="mw-cite-backlink"><b><a href="#cite_ref-31">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFBorning1999" class="citation web cs1">Borning, Alan (Autumn 1999). <a rel="nofollow" class="external text" href="https://courses.cs.washington.edu/courses/cse505/99au/functional/applicative-normal.pdf">"Applicative vs Normal Order Evaluation in Functional Languages"</a> <span class="cs1-format">(PDF)</span>. <i>CSE 505: Concepts of Programming Languages</i>. University of Washington<span class="reference-accessdate">. Retrieved <span class="nowrap">23 August</span> 2021</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=CSE+505%3A+Concepts+of+Programming+Languages&amp;rft.atitle=Applicative+vs+Normal+Order+Evaluation+in+Functional+Languages&amp;rft.ssn=fall&amp;rft.date=1999&amp;rft.aulast=Borning&amp;rft.aufirst=Alan&amp;rft_id=https%3A%2F%2Fcourses.cs.washington.edu%2Fcourses%2Fcse505%2F99au%2Ffunctional%2Fapplicative-normal.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-Mazzola-32"><span class="mw-cite-backlink"><b><a href="#cite_ref-Mazzola_32-0">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFMazzolaMilmeisterWeissmann2004" class="citation book cs1">Mazzola, Guerino; Milmeister, Gérard; Weissmann, Jody (21 October 2004). <a rel="nofollow" class="external text" href="https://books.google.com/books?id=SMWx5fQZcEUC&amp;dq=applicative%20order%20normal%20order&amp;pg=PA323"><i>Comprehensive Mathematics for Computer Scientists 2</i></a>. Springer Science &amp; Business Media. p.&nbsp;323. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/978-3-540-20861-7" title="Special:BookSources/978-3-540-20861-7"><bdi>978-3-540-20861-7</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Comprehensive+Mathematics+for+Computer+Scientists+2&amp;rft.pages=323&amp;rft.pub=Springer+Science+%26+Business+Media&amp;rft.date=2004-10-21&amp;rft.isbn=978-3-540-20861-7&amp;rft.aulast=Mazzola&amp;rft.aufirst=Guerino&amp;rft.au=Milmeister%2C+G%C3%A9rard&amp;rft.au=Weissmann%2C+Jody&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DSMWx5fQZcEUC%26dq%3Dapplicative%2520order%2520normal%2520order%26pg%3DPA323&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-Sturm-33"><span class="mw-cite-backlink">^ <a href="#cite_ref-Sturm_33-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Sturm_33-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFSturm2011" class="citation book cs1">Sturm, Oliver (11 April 2011). <a rel="nofollow" class="external text" href="https://books.google.com/books?id=nOc-FYPXN9IC&amp;pg=PA91"><i>Functional Programming in C#: Classic Programming Techniques for Modern Projects</i></a>. John Wiley and Sons. p.&nbsp;91. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/978-0-470-74458-1" title="Special:BookSources/978-0-470-74458-1"><bdi>978-0-470-74458-1</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Functional+Programming+in+C%23%3A+Classic+Programming+Techniques+for+Modern+Projects&amp;rft.pages=91&amp;rft.pub=John+Wiley+and+Sons&amp;rft.date=2011-04-11&amp;rft.isbn=978-0-470-74458-1&amp;rft.aulast=Sturm&amp;rft.aufirst=Oliver&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DnOc-FYPXN9IC%26pg%3DPA91&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-34"><span class="mw-cite-backlink"><b><a href="#cite_ref-34">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFMarlow" class="citation web cs1">Marlow, Simon. <a rel="nofollow" class="external text" href="https://wiki.haskell.org/HaskellImplementorsWorkshop/2012#Programme">"Why can't I get a stack trace?"</a>. <i>Haskell Implementors Workshop 2012</i><span class="reference-accessdate">. Retrieved <span class="nowrap">25 August</span> 2021</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=Haskell+Implementors+Workshop+2012&amp;rft.atitle=Why+can%27t+I+get+a+stack+trace%3F&amp;rft.aulast=Marlow&amp;rft.aufirst=Simon&amp;rft_id=https%3A%2F%2Fwiki.haskell.org%2FHaskellImplementorsWorkshop%2F2012%23Programme&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-35"><span class="mw-cite-backlink"><b><a href="#cite_ref-35">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFNilsson1999" class="citation conference cs1">Nilsson, Henrik (1999). "Tracing piece by piece: Affordable debugging for lazy functional languages". <i>Proceedings of the fourth ACM SIGPLAN international conference on Functional programming</i>. pp.&nbsp;<span class="nowrap">36–</span>47. <a href="/wiki/CiteSeerX_(identifier)" class="mw-redirect" title="CiteSeerX (identifier)">CiteSeerX</a>&nbsp;<span class="id-lock-free" title="Freely accessible"><a rel="nofollow" class="external text" href="https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.451.6513">10.1.1.451.6513</a></span>. <a href="/wiki/Doi_(identifier)" class="mw-redirect" title="Doi (identifier)">doi</a>:<a rel="nofollow" class="external text" href="https://doi.org/10.1145%2F317636.317782">10.1145/317636.317782</a>. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/1581131119" title="Special:BookSources/1581131119"><bdi>1581131119</bdi></a>. <a href="/wiki/S2CID_(identifier)" class="mw-redirect" title="S2CID (identifier)">S2CID</a>&nbsp;<a rel="nofollow" class="external text" href="https://api.semanticscholar.org/CorpusID:13954359">13954359</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=conference&amp;rft.atitle=Tracing+piece+by+piece%3A+Affordable+debugging+for+lazy+functional+languages&amp;rft.btitle=Proceedings+of+the+fourth+ACM+SIGPLAN+international+conference+on+Functional+programming&amp;rft.pages=36-47&amp;rft.date=1999&amp;rft_id=https%3A%2F%2Fciteseerx.ist.psu.edu%2Fviewdoc%2Fsummary%3Fdoi%3D10.1.1.451.6513%23id-name%3DCiteSeerX&amp;rft_id=https%3A%2F%2Fapi.semanticscholar.org%2FCorpusID%3A13954359%23id-name%3DS2CID&amp;rft_id=info%3Adoi%2F10.1145%2F317636.317782&amp;rft.isbn=1581131119&amp;rft.aulast=Nilsson&amp;rft.aufirst=Henrik&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-36"><span class="mw-cite-backlink"><b><a href="#cite_ref-36">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite class="citation web cs1"><a rel="nofollow" class="external text" href="https://www.freepascal.org/docs-html/ref/refsu68.html">"Open array parameters"</a>. <i>www.freepascal.org</i><span class="reference-accessdate">. Retrieved <span class="nowrap">20 January</span> 2024</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=www.freepascal.org&amp;rft.atitle=Open+array+parameters&amp;rft_id=https%3A%2F%2Fwww.freepascal.org%2Fdocs-html%2Fref%2Frefsu68.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-Java_is_Pass-by-Value,_Dammit!-37"><span class="mw-cite-backlink">^ <a href="#cite_ref-Java_is_Pass-by-Value,_Dammit!_37-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Java_is_Pass-by-Value,_Dammit!_37-1"><sup><i><b>b</b></i></sup></a> <a href="#cite_ref-Java_is_Pass-by-Value,_Dammit!_37-2"><sup><i><b>c</b></i></sup></a> <a href="#cite_ref-Java_is_Pass-by-Value,_Dammit!_37-3"><sup><i><b>d</b></i></sup></a></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite class="citation web cs1"><a rel="nofollow" class="external text" href="http://javadude.com/articles/passbyvalue.htm">"Java is Pass-by-Value, Dammit!"</a>. 16 May 2001<span class="reference-accessdate">. Retrieved <span class="nowrap">2016-12-24</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Java+is+Pass-by-Value%2C+Dammit%21&amp;rft.date=2001-05-16&amp;rft_id=http%3A%2F%2Fjavadude.com%2Farticles%2Fpassbyvalue.htm&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-38"><span class="mw-cite-backlink"><b><a href="#cite_ref-38">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFCoenen" class="citation web cs1">Coenen, Frans. <a rel="nofollow" class="external text" href="https://cgi.csc.liv.ac.uk/~frans/OldLectures/2CS45/paramPassing/paramPassing.html#callByCopyRestore">"PARAMETER PASSING"</a>. <i>cgi.csc.liv.ac.uk</i><span class="reference-accessdate">. Retrieved <span class="nowrap">22 January</span> 2024</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=cgi.csc.liv.ac.uk&amp;rft.atitle=PARAMETER+PASSING&amp;rft.aulast=Coenen&amp;rft.aufirst=Frans&amp;rft_id=https%3A%2F%2Fcgi.csc.liv.ac.uk%2F~frans%2FOldLectures%2F2CS45%2FparamPassing%2FparamPassing.html%23callByCopyRestore&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-39"><span class="mw-cite-backlink"><b><a href="#cite_ref-39">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite class="citation book cs1"><a rel="nofollow" class="external text" href="https://www.lri.fr/~marche/MPRI-2-36-1/2012/poly-chap5.pdf">"Call by Reference, Aliasing Issues"</a> <span class="cs1-format">(PDF)</span>. <i>MPRI Course 2-36-1: Proof of Program (Lecture notes)</i>. p.&nbsp;53.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=bookitem&amp;rft.atitle=Call+by+Reference%2C+Aliasing+Issues&amp;rft.btitle=MPRI+Course+2-36-1%3A+Proof+of+Program+%28Lecture+notes%29&amp;rft.pages=53&amp;rft_id=https%3A%2F%2Fwww.lri.fr%2F~marche%2FMPRI-2-36-1%2F2012%2Fpoly-chap5.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-40"><span class="mw-cite-backlink"><b><a href="#cite_ref-40">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite class="citation book cs1"><a rel="nofollow" class="external text" href="http://www.ada-auth.org/standards/22rm/RM-Final.pdf"><i>Ada 2022 Language Reference Manual</i></a> <span class="cs1-format">(PDF)</span>. 13 October 2023. p.&nbsp;215.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Ada+2022+Language+Reference+Manual&amp;rft.pages=215&amp;rft.date=2023-10-13&amp;rft_id=http%3A%2F%2Fwww.ada-auth.org%2Fstandards%2F22rm%2FRM-Final.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-41"><span class="mw-cite-backlink"><b><a href="#cite_ref-41">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFBarnes2013" class="citation book cs1">Barnes, John (2013). <a rel="nofollow" class="external text" href="https://www.ada-europe.org/manuals/Rationale_2012.pdf"><i>Ada 2012 rationale: the language, the standard libraries</i></a> <span class="cs1-format">(PDF)</span>. Heidelberg: Springer. pp.&nbsp;<span class="nowrap">15–</span>16, <span class="nowrap">87–</span>88. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/978-3-642-45210-9" title="Special:BookSources/978-3-642-45210-9"><bdi>978-3-642-45210-9</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Ada+2012+rationale%3A+the+language%2C+the+standard+libraries&amp;rft.place=Heidelberg&amp;rft.pages=15-16%2C+87-88&amp;rft.pub=Springer&amp;rft.date=2013&amp;rft.isbn=978-3-642-45210-9&amp;rft.aulast=Barnes&amp;rft.aufirst=John&amp;rft_id=https%3A%2F%2Fwww.ada-europe.org%2Fmanuals%2FRationale_2012.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-rfc5531-42"><span class="mw-cite-backlink"><b><a href="#cite_ref-rfc5531_42-0">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFThurlow2009" class="citation journal cs1">Thurlow, Robert (May 2009). <a rel="nofollow" class="external text" href="https://tools.ietf.org/html/rfc5531">"RPC: Remote Procedure Call Protocol Specification Version 2"</a>. <i>tools.ietf.org</i>. IETF<span class="reference-accessdate">. Retrieved <span class="nowrap">7 April</span> 2018</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=tools.ietf.org&amp;rft.atitle=RPC%3A+Remote+Procedure+Call+Protocol+Specification+Version+2&amp;rft.date=2009-05&amp;rft.aulast=Thurlow&amp;rft.aufirst=Robert&amp;rft_id=https%3A%2F%2Ftools.ietf.org%2Fhtml%2Frfc5531&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-Lundh_Call_Object-43"><span class="mw-cite-backlink"><b><a href="#cite_ref-Lundh_Call_Object_43-0">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFLundh" class="citation web cs1">Lundh, Fredrik. <a rel="nofollow" class="external text" href="https://web.archive.org/web/20110519060105/http://effbot.org/zone/call-by-object.htm">"Call by Object"</a>. <i>Effbot.org</i>. Archived from <a rel="nofollow" class="external text" href="http://effbot.org/zone/call-by-object.htm">the original</a> on 2011-05-19<span class="reference-accessdate">. Retrieved <span class="nowrap">2011-05-19</span></span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=Effbot.org&amp;rft.atitle=Call+by+Object&amp;rft.aulast=Lundh&amp;rft.aufirst=Fredrik&amp;rft_id=http%3A%2F%2Feffbot.org%2Fzone%2Fcall-by-object.htm&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-44"><span class="mw-cite-backlink"><b><a href="#cite_ref-44">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFJones2010" class="citation web cs1">Jones, Rhys Price (2010). <a rel="nofollow" class="external text" href="https://web.archive.org/web/20141016203925/http://www.seas.gwu.edu/~rhyspj/spring10cs145/lab9/lab92.html">"Is Scheme call-by-value?"</a>. <i>CS 145 Programming Languages Lab 9: Parameter Passing</i>. George Washington University. Archived from <a rel="nofollow" class="external text" href="http://www2.seas.gwu.edu/~rhyspj/spring10cs145/lab9/lab92.html">the original</a> on 16 October 2014<span class="reference-accessdate">. Retrieved <span class="nowrap">20 January</span> 2024</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=CS+145+Programming+Languages+Lab+9%3A+Parameter+Passing&amp;rft.atitle=Is+Scheme+call-by-value%3F&amp;rft.date=2010&amp;rft.aulast=Jones&amp;rft.aufirst=Rhys+Price&amp;rft_id=http%3A%2F%2Fwww2.seas.gwu.edu%2F~rhyspj%2Fspring10cs145%2Flab9%2Flab92.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-45"><span class="mw-cite-backlink"><b><a href="#cite_ref-45">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite class="citation web cs1"><a rel="nofollow" class="external text" href="https://www.tcl.tk/man/tcl8.4/TclLib/Object.html">"Tcl Library Procedures - Tcl_Obj manual page"</a>. <i>www.tcl.tk</i>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=www.tcl.tk&amp;rft.atitle=Tcl+Library+Procedures+-+Tcl_Obj+manual+page&amp;rft_id=https%3A%2F%2Fwww.tcl.tk%2Fman%2Ftcl8.4%2FTclLib%2FObject.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-CA1021-46"><span class="mw-cite-backlink"><b><a href="#cite_ref-CA1021_46-0">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite class="citation web cs1"><a rel="nofollow" class="external text" href="http://msdn.microsoft.com/en-us/library/ms182131.aspx">"CA1021: Avoid out parameters"</a>. Microsoft. 15 November 2016.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=CA1021%3A+Avoid+out+parameters&amp;rft.pub=Microsoft&amp;rft.date=2016-11-15&amp;rft_id=http%3A%2F%2Fmsdn.microsoft.com%2Fen-us%2Flibrary%2Fms182131.aspx&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-47"><span class="mw-cite-backlink"><b><a href="#cite_ref-47">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFLeo1996" class="citation book cs1">Leo, Ray (November 1996). <a rel="nofollow" class="external text" href="https://books.google.com/books?id=BK-yeUGlEqgC&amp;dq=%22call%20by%20address%22%20%22call%20by%20pointer%22%20C%2B%2B&amp;pg=PA79"><i>Little C++ (Made Easy)</i></a>. LeoSudo Inc. pp.&nbsp;<span class="nowrap">79–</span>80. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/978-0-9654634-1-6" title="Special:BookSources/978-0-9654634-1-6"><bdi>978-0-9654634-1-6</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Little+C%2B%2B+%28Made+Easy%29&amp;rft.pages=79-80&amp;rft.pub=LeoSudo+Inc&amp;rft.date=1996-11&amp;rft.isbn=978-0-9654634-1-6&amp;rft.aulast=Leo&amp;rft.aufirst=Ray&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DBK-yeUGlEqgC%26dq%3D%2522call%2520by%2520address%2522%2520%2522call%2520by%2520pointer%2522%2520C%252B%252B%26pg%3DPA79&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-48"><span class="mw-cite-backlink"><b><a href="#cite_ref-48">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFDandamudi2005" class="citation book cs1">Dandamudi, Sivarama P. (15 July 2005). <a rel="nofollow" class="external text" href="https://books.google.com/books?id=wS4EG0GyKXUC&amp;dq=c%20%22call%20by%20reference%22%20-%22c%2B%2B%22&amp;pg=PA232"><i>Guide to Assembly Language Programming in Linux</i></a>. Springer Science &amp; Business Media. p.&nbsp;232. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/978-0-387-25897-3" title="Special:BookSources/978-0-387-25897-3"><bdi>978-0-387-25897-3</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Guide+to+Assembly+Language+Programming+in+Linux&amp;rft.pages=232&amp;rft.pub=Springer+Science+%26+Business+Media&amp;rft.date=2005-07-15&amp;rft.isbn=978-0-387-25897-3&amp;rft.aulast=Dandamudi&amp;rft.aufirst=Sivarama+P.&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DwS4EG0GyKXUC%26dq%3Dc%2520%2522call%2520by%2520reference%2522%2520-%2522c%252B%252B%2522%26pg%3DPA232&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-49"><span class="mw-cite-backlink"><b><a href="#cite_ref-49">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFSrivastavaSrivastava2018" class="citation book cs1">Srivastava, S. K.; Srivastava, Deepali (6 June 2018). <a rel="nofollow" class="external text" href="https://books.google.com/books?id=IYxjDwAAQBAJ&amp;dq=c%20%22call%20by%20reference%22%20-%22c%2B%2B%22&amp;pg=PA206"><i>C in Depth</i></a>. BPB Publications. p.&nbsp;206. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/978-93-87284-94-4" title="Special:BookSources/978-93-87284-94-4"><bdi>978-93-87284-94-4</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=C+in+Depth&amp;rft.pages=206&amp;rft.pub=BPB+Publications&amp;rft.date=2018-06-06&amp;rft.isbn=978-93-87284-94-4&amp;rft.aulast=Srivastava&amp;rft.aufirst=S.+K.&amp;rft.au=Srivastava%2C+Deepali&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DIYxjDwAAQBAJ%26dq%3Dc%2520%2522call%2520by%2520reference%2522%2520-%2522c%252B%252B%2522%26pg%3DPA206&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-50"><span class="mw-cite-backlink"><b><a href="#cite_ref-50">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite class="citation web cs1"><a rel="nofollow" class="external text" href="https://okmij.org/ftp/meta-programming/mutable-var.html">"Mutable Variables and Reference Types"</a>. <i>okmij.org</i><span class="reference-accessdate">. Retrieved <span class="nowrap">20 January</span> 2024</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=okmij.org&amp;rft.atitle=Mutable+Variables+and+Reference+Types&amp;rft_id=https%3A%2F%2Fokmij.org%2Fftp%2Fmeta-programming%2Fmutable-var.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-51"><span class="mw-cite-backlink"><b><a href="#cite_ref-51">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFVermeir2011" class="citation book cs1">Vermeir, Dirk (28 June 2011). <a rel="nofollow" class="external text" href="https://books.google.com/books?id=dW4QBwAAQBAJ&amp;dq=%22call%20by%20address%22&amp;pg=PA10"><i>Multi-Paradigm Programming using C++</i></a>. Springer Science &amp; Business Media. pp.&nbsp;<span class="nowrap">10–</span>11. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/978-1-4471-0311-0" title="Special:BookSources/978-1-4471-0311-0"><bdi>978-1-4471-0311-0</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Multi-Paradigm+Programming+using+C%2B%2B&amp;rft.pages=10-11&amp;rft.pub=Springer+Science+%26+Business+Media&amp;rft.date=2011-06-28&amp;rft.isbn=978-1-4471-0311-0&amp;rft.aulast=Vermeir&amp;rft.aufirst=Dirk&amp;rft_id=https%3A%2F%2Fbooks.google.com%2Fbooks%3Fid%3DdW4QBwAAQBAJ%26dq%3D%2522call%2520by%2520address%2522%26pg%3DPA10&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-52"><span class="mw-cite-backlink"><b><a href="#cite_ref-52">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFMcCollinMorell" class="citation web cs1">McCollin, Thomas Gwynfryn; Morell, Tobias. <a rel="nofollow" class="external text" href="https://projekter.aau.dk/projekter/files/306585571/PT103F19_report.pdf#page=12">"A Game of Paradigms: A Usability Study of Functional Idioms in Gameplay Programming"</a> <span class="cs1-format">(PDF)</span>. Aalborg University. p.&nbsp;6<span class="reference-accessdate">. Retrieved <span class="nowrap">11 January</span> 2022</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=A+Game+of+Paradigms%3A+A+Usability+Study+of+Functional+Idioms+in+Gameplay+Programming&amp;rft.pages=6&amp;rft.pub=Aalborg+University&amp;rft.aulast=McCollin&amp;rft.aufirst=Thomas+Gwynfryn&amp;rft.au=Morell%2C+Tobias&amp;rft_id=https%3A%2F%2Fprojekter.aau.dk%2Fprojekter%2Ffiles%2F306585571%2FPT103F19_report.pdf%23page%3D12&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-Schauser-53"><span class="mw-cite-backlink">^ <a href="#cite_ref-Schauser_53-0"><sup><i><b>a</b></i></sup></a> <a href="#cite_ref-Schauser_53-1"><sup><i><b>b</b></i></sup></a></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFSchauserGoldstein1995" class="citation conference cs1">Schauser, Klaus E.; Goldstein, Seth C. (1995). <a rel="nofollow" class="external text" href="http://www.cs.cmu.edu/~seth/papers/schauser-fplca95.pdf">"How much non-strictness do lenient programs require?"</a> <span class="cs1-format">(PDF)</span>. <i>Proceedings of the seventh international conference on Functional programming languages and computer architecture - FPCA '95</i>. pp.&nbsp;<span class="nowrap">216–</span>225. <a href="/wiki/Doi_(identifier)" class="mw-redirect" title="Doi (identifier)">doi</a>:<a rel="nofollow" class="external text" href="https://doi.org/10.1145%2F224164.224208">10.1145/224164.224208</a>. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/0897917197" title="Special:BookSources/0897917197"><bdi>0897917197</bdi></a>. <a href="/wiki/S2CID_(identifier)" class="mw-redirect" title="S2CID (identifier)">S2CID</a>&nbsp;<a rel="nofollow" class="external text" href="https://api.semanticscholar.org/CorpusID:2045943">2045943</a><span class="reference-accessdate">. Retrieved <span class="nowrap">7 January</span> 2022</span>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=conference&amp;rft.atitle=How+much+non-strictness+do+lenient+programs+require%3F&amp;rft.btitle=Proceedings+of+the+seventh+international+conference+on+Functional+programming+languages+and+computer+architecture+-+FPCA+%2795&amp;rft.pages=216-225&amp;rft.date=1995&amp;rft_id=https%3A%2F%2Fapi.semanticscholar.org%2FCorpusID%3A2045943%23id-name%3DS2CID&amp;rft_id=info%3Adoi%2F10.1145%2F224164.224208&amp;rft.isbn=0897917197&amp;rft.aulast=Schauser&amp;rft.aufirst=Klaus+E.&amp;rft.au=Goldstein%2C+Seth+C.&amp;rft_id=http%3A%2F%2Fwww.cs.cmu.edu%2F~seth%2Fpapers%2Fschauser-fplca95.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
<li id="cite_note-Optimistic_Evaluation-54"><span class="mw-cite-backlink"><b><a href="#cite_ref-Optimistic_Evaluation_54-0">^</a></b></span> <span class="reference-text"><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFEnnalsJones2003" class="citation web cs1">Ennals, Robert; <a href="/wiki/Simon_Peyton_Jones" title="Simon Peyton Jones">Jones, Simon Peyton</a> (August 2003). <a rel="nofollow" class="external text" href="http://research.microsoft.com/en-us/um/people/simonpj/papers/optimistic/">"Optimistic Evaluation: a fast evaluation strategy for non-strict programs"</a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=unknown&amp;rft.btitle=Optimistic+Evaluation%3A+a+fast+evaluation+strategy+for+non-strict+programs&amp;rft.date=2003-08&amp;rft.aulast=Ennals&amp;rft.aufirst=Robert&amp;rft.au=Jones%2C+Simon+Peyton&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Fsimonpj%2Fpapers%2Foptimistic%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></span>
</li>
</ol></div></div>
<div class="mw-heading mw-heading2"><h2 id="Further_reading">Further reading</h2><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=23" title="Edit section: Further reading"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<ul><li><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFBaker-FinchKingHallTrinder1999" class="citation journal cs1">Baker-Finch, Clem; King, David; Hall, Jon; Trinder, Phil (1999-03-10). <a rel="nofollow" class="external text" href="http://cs.anu.edu.au/people/Clem.Baker-Finch/Research/par-cbn-tr/">"An Operational Semantics for Parallel Call-by-Need"</a> <span class="cs1-format">(ps)</span>. <i>Research Report</i>. <b>99</b> (1). Faculty of Mathematics &amp; Computing, The Open University.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=article&amp;rft.jtitle=Research+Report&amp;rft.atitle=An+Operational+Semantics+for+Parallel+Call-by-Need&amp;rft.volume=99&amp;rft.issue=1&amp;rft.date=1999-03-10&amp;rft.aulast=Baker-Finch&amp;rft.aufirst=Clem&amp;rft.au=King%2C+David&amp;rft.au=Hall%2C+Jon&amp;rft.au=Trinder%2C+Phil&amp;rft_id=http%3A%2F%2Fcs.anu.edu.au%2Fpeople%2FClem.Baker-Finch%2FResearch%2Fpar-cbn-tr%2F&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></li>
<li><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFEnnalsPeyton_Jones2003" class="citation conference cs1">Ennals, Robert; <a href="/wiki/Simon_Peyton_Jones" title="Simon Peyton Jones">Peyton Jones, Simon</a> (2003). <a rel="nofollow" class="external text" href="http://research.microsoft.com/en-us/um/people/simonpj/Papers/optimistic/icfp2003.pdf"><i>Optimistic Evaluation: A Fast Evaluation Strategy for Non-Strict Programs</i></a> <span class="cs1-format">(PDF)</span>. International Conference on Functional Programming. ACM Press.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=conference&amp;rft.btitle=Optimistic+Evaluation%3A+A+Fast+Evaluation+Strategy+for+Non-Strict+Programs&amp;rft.pub=ACM+Press&amp;rft.date=2003&amp;rft.aulast=Ennals&amp;rft.aufirst=Robert&amp;rft.au=Peyton+Jones%2C+Simon&amp;rft_id=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Fsimonpj%2FPapers%2Foptimistic%2Ficfp2003.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></li>
<li><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFLudäscher2001" class="citation web cs1">Ludäscher, Bertram (2001-01-24). <a rel="nofollow" class="external text" href="http://users.sdsc.edu/~ludaesch/CSE130/ln5.html">"CSE 130 lecture notes"</a>. <i>CSE 130: Programming Languages: Principles &amp; Paradigms</i>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=CSE+130%3A+Programming+Languages%3A+Principles+%26+Paradigms&amp;rft.atitle=CSE+130+lecture+notes&amp;rft.date=2001-01-24&amp;rft.aulast=Lud%C3%A4scher&amp;rft.aufirst=Bertram&amp;rft_id=http%3A%2F%2Fusers.sdsc.edu%2F~ludaesch%2FCSE130%2Fln5.html&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></li>
<li><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFPierce2002" class="citation book cs1"><a href="/wiki/Benjamin_C._Pierce" title="Benjamin C. Pierce">Pierce, Benjamin C.</a> (2002). <i><a href="/wiki/Types_and_Programming_Languages" title="Types and Programming Languages">Types and Programming Languages</a></i>. <a href="/wiki/MIT_Press" title="MIT Press">MIT Press</a>. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/0-262-16209-1" title="Special:BookSources/0-262-16209-1"><bdi>0-262-16209-1</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Types+and+Programming+Languages&amp;rft.pub=MIT+Press&amp;rft.date=2002&amp;rft.isbn=0-262-16209-1&amp;rft.aulast=Pierce&amp;rft.aufirst=Benjamin+C.&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></li>
<li><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite id="CITEREFSestoft2002" class="citation book cs1">Sestoft, Peter (2002). Mogensen, T; Schmidt, D; Sudborough, I. H. (eds.). <a rel="nofollow" class="external text" href="http://www.itu.dk/people/sestoft/papers/sestoft-lamreduce.pdf"><i>Demonstrating Lambda Calculus Reduction</i></a> <span class="cs1-format">(PDF)</span>. Lecture Notes in Computer Science. Vol.&nbsp;2566. Springer-Verlag. pp.&nbsp;<span class="nowrap">420–</span>435. <a href="/wiki/ISBN_(identifier)" class="mw-redirect" title="ISBN (identifier)">ISBN</a>&nbsp;<a href="/wiki/Special:BookSources/3-540-00326-6" title="Special:BookSources/3-540-00326-6"><bdi>3-540-00326-6</bdi></a>.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Abook&amp;rft.genre=book&amp;rft.btitle=Demonstrating+Lambda+Calculus+Reduction&amp;rft.series=Lecture+Notes+in+Computer+Science&amp;rft.pages=420-435&amp;rft.pub=Springer-Verlag&amp;rft.date=2002&amp;rft.isbn=3-540-00326-6&amp;rft.aulast=Sestoft&amp;rft.aufirst=Peter&amp;rft_id=http%3A%2F%2Fwww.itu.dk%2Fpeople%2Fsestoft%2Fpapers%2Fsestoft-lamreduce.pdf&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span> <span class="cs1-visible-error citation-comment"><code class="cs1-code">{{<a href="/wiki/Template:Cite_book" title="Template:Cite book">cite book</a>}}</code>: </span><span class="cs1-visible-error citation-comment"><code class="cs1-code">|work=</code> ignored (<a href="/wiki/Help:CS1_errors#periodical_ignored" title="Help:CS1 errors">help</a>)</span></li>
<li><link rel="mw-deduplicated-inline-style" href="mw-data:TemplateStyles:r1238218222"><cite class="citation web cs1"><a rel="nofollow" class="external text" href="https://archive.today/20130121133442/http://digg.com/newsbar/topnews/c_programming_lesson_call_by_value_and_call_by_reference">"Call by Value and Call by Reference in C Programming"</a>. <i>Call by Value and Call by Reference in C Programming explained</i>. Archived from <a rel="nofollow" class="external text" href="http://digg.com/newsbar/topnews/c_programming_lesson_call_by_value_and_call_by_reference">the original</a> on 2013-01-21.</cite><span title="ctx_ver=Z39.88-2004&amp;rft_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Ajournal&amp;rft.genre=unknown&amp;rft.jtitle=Call+by+Value+and+Call+by+Reference+in+C+Programming+explained&amp;rft.atitle=Call+by+Value+and+Call+by+Reference+in+C+Programming&amp;rft_id=http%3A%2F%2Fdigg.com%2Fnewsbar%2Ftopnews%2Fc_programming_lesson_call_by_value_and_call_by_reference&amp;rfr_id=info%3Asid%2Fen.wikipedia.org%3AEvaluation+strategy" class="Z3988"></span></li></ul>
<div class="mw-heading mw-heading2"><h2 id="External_links">External links</h2><span class="mw-editsection"><span class="mw-editsection-bracket">[</span><a href="/w/index.php?title=Evaluation_strategy&amp;action=edit&amp;section=24" title="Edit section: External links"><span>edit</span></a><span class="mw-editsection-bracket">]</span></span></div>
<ul><li>The interactive on-line <a href="/wiki/Geometry_of_Interaction" class="mw-redirect" title="Geometry of Interaction">Geometry of Interaction</a> <a rel="nofollow" class="external text" href="https://koko-m.github.io/GoI-Visualiser/">visualiser</a>, implementing a graph-based machine for several common evaluation strategies.</li></ul>
<!-- 
NewPP limit report
Parsed by mw‐web.eqiad.main‐5f99d748c‐9p5rp
Cached time: 20250728151414
Cache expiry: 2592000
Reduced expiry: false
Complications: [vary‐revision‐sha1, show‐toc]
CPU time usage: 0.996 seconds
Real time usage: 1.208 seconds
Preprocessor visited node count: 4704/1000000
Revision size: 47196/2097152 bytes
Post‐expand include size: 120357/2097152 bytes
Template argument size: 1097/2097152 bytes
Highest expansion depth: 16/100
Expensive parser function count: 30/500
Unstrip recursion depth: 1/20
Unstrip post‐expand size: 250292/5000000 bytes
Lua time usage: 0.690/10.000 seconds
Lua memory usage: 7205998/52428800 bytes
Number of Wikibase entities loaded: 0/500
-->
<!--
Transclusion expansion time report (%,ms,calls,template)
100.00% 1088.821      1 -total
 53.43%  581.775      1 Template:Reflist
 25.81%  281.038     23 Template:Cite_book
 17.16%  186.857     25 Template:Cite_web
  8.81%   95.971      1 Template:Evaluation_strategy
  8.68%   94.457      1 Template:Sidebar
  7.36%   80.112      1 Template:Short_description
  5.75%   62.611      1 Template:More_footnotes_needed
  5.25%   57.136      1 Template:Ambox
  5.15%   56.113      6 Template:Cite_journal
-->

<!-- Saved in parser cache with key enwiki:pcache:2977119:|#|:idhash:canonical and timestamp 20250728151414 and revision id 1294288936. Rendering was triggered because: page-view
 -->
</div><!--esi <esi:include src="/esitest-fa8a495983347898/content" /> --><noscript><img src="https://en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1&amp;usesul3=1" alt="" width="1" height="1" style="border: none; position: absolute;"></noscript>
<div class="printfooter" data-nosnippet="">Retrieved from "<a dir="ltr" href="https://en.wikipedia.org/w/index.php?title=Evaluation_strategy&amp;oldid=1294288936#Call_by_need">https://en.wikipedia.org/w/index.php?title=Evaluation_strategy&amp;oldid=1294288936#Call_by_need</a>"</div></div>
					<div id="catlinks" class="catlinks" data-mw="interface"><div id="mw-normal-catlinks" class="mw-normal-catlinks"><a href="/wiki/Help:Category" title="Help:Category">Category</a>: <ul><li><a href="/wiki/Category:Evaluation_strategy" title="Category:Evaluation strategy">Evaluation strategy</a></li></ul></div><div id="mw-hidden-catlinks" class="mw-hidden-catlinks mw-hidden-cats-hidden">Hidden categories: <ul><li><a href="/wiki/Category:Articles_with_short_description" title="Category:Articles with short description">Articles with short description</a></li><li><a href="/wiki/Category:Short_description_is_different_from_Wikidata" title="Category:Short description is different from Wikidata">Short description is different from Wikidata</a></li><li><a href="/wiki/Category:Articles_lacking_in-text_citations_from_April_2012" title="Category:Articles lacking in-text citations from April 2012">Articles lacking in-text citations from April 2012</a></li><li><a href="/wiki/Category:All_articles_lacking_in-text_citations" title="Category:All articles lacking in-text citations">All articles lacking in-text citations</a></li><li><a href="/wiki/Category:CS1_errors:_periodical_ignored" title="Category:CS1 errors: periodical ignored">CS1 errors: periodical ignored</a></li><li><a href="/wiki/Category:Articles_with_example_Python_(programming_language)_code" title="Category:Articles with example Python (programming language) code">Articles with example Python (programming language) code</a></li></ul></div></div>
				</div>
			</main>
			
		</div>
		<div class="mw-footer-container">
			
<footer id="footer" class="mw-footer" >
	<ul id="footer-info">
	<li id="footer-info-lastmod"> This page was last edited on 6 June 2025, at 20:45<span class="anonymous-show">&#160;(UTC)</span>.</li>
	<li id="footer-info-copyright">Text is available under the <a href="/wiki/Wikipedia:Text_of_the_Creative_Commons_Attribution-ShareAlike_4.0_International_License" title="Wikipedia:Text of the Creative Commons Attribution-ShareAlike 4.0 International License">Creative Commons Attribution-ShareAlike 4.0 License</a>;
additional terms may apply. By using this site, you agree to the <a href="https://foundation.wikimedia.org/wiki/Special:MyLanguage/Policy:Terms_of_Use" class="extiw" title="foundation:Special:MyLanguage/Policy:Terms of Use">Terms of Use</a> and <a href="https://foundation.wikimedia.org/wiki/Special:MyLanguage/Policy:Privacy_policy" class="extiw" title="foundation:Special:MyLanguage/Policy:Privacy policy">Privacy Policy</a>. Wikipedia® is a registered trademark of the <a rel="nofollow" class="external text" href="https://wikimediafoundation.org/">Wikimedia Foundation, Inc.</a>, a non-profit organization.</li>
</ul>

	<ul id="footer-places">
	<li id="footer-places-privacy"><a href="https://foundation.wikimedia.org/wiki/Special:MyLanguage/Policy:Privacy_policy">Privacy policy</a></li>
	<li id="footer-places-about"><a href="/wiki/Wikipedia:About">About Wikipedia</a></li>
	<li id="footer-places-disclaimers"><a href="/wiki/Wikipedia:General_disclaimer">Disclaimers</a></li>
	<li id="footer-places-contact"><a href="//en.wikipedia.org/wiki/Wikipedia:Contact_us">Contact Wikipedia</a></li>
	<li id="footer-places-wm-codeofconduct"><a href="https://foundation.wikimedia.org/wiki/Special:MyLanguage/Policy:Universal_Code_of_Conduct">Code of Conduct</a></li>
	<li id="footer-places-developers"><a href="https://developer.wikimedia.org">Developers</a></li>
	<li id="footer-places-statslink"><a href="https://stats.wikimedia.org/#/en.wikipedia.org">Statistics</a></li>
	<li id="footer-places-cookiestatement"><a href="https://foundation.wikimedia.org/wiki/Special:MyLanguage/Policy:Cookie_statement">Cookie statement</a></li>
	<li id="footer-places-mobileview"><a href="//en.m.wikipedia.org/w/index.php?title=Evaluation_strategy&amp;mobileaction=toggle_view_mobile#Call_by_need" class="noprint stopMobileRedirectToggle">Mobile view</a></li>
</ul>

	<ul id="footer-icons" class="noprint">
	<li id="footer-copyrightico"><a href="https://www.wikimedia.org/" class="cdx-button cdx-button--fake-button cdx-button--size-large cdx-button--fake-button--enabled"><picture><source media="(min-width: 500px)" srcset="/static/images/footer/wikimedia-button.svg" width="84" height="29"><img src="/static/images/footer/wikimedia.svg" width="25" height="25" alt="Wikimedia Foundation" lang="en" loading="lazy"></picture></a></li>
	<li id="footer-poweredbyico"><a href="https://www.mediawiki.org/" class="cdx-button cdx-button--fake-button cdx-button--size-large cdx-button--fake-button--enabled"><picture><source media="(min-width: 500px)" srcset="/w/resources/assets/poweredby_mediawiki.svg" width="88" height="31"><img src="/w/resources/assets/mediawiki_compact.svg" alt="Powered by MediaWiki" lang="en" width="25" height="25" loading="lazy"></picture></a></li>
</ul>

</footer>

		</div>
	</div> 
</div> 
<div class="vector-header-container vector-sticky-header-container no-font-mode-scale">
	<div id="vector-sticky-header" class="vector-sticky-header">
		<div class="vector-sticky-header-start">
			<div class="vector-sticky-header-icon-start vector-button-flush-left vector-button-flush-right" aria-hidden="true">
				<button class="cdx-button cdx-button--weight-quiet cdx-button--icon-only vector-sticky-header-search-toggle" tabindex="-1" data-event-name="ui.vector-sticky-search-form.icon"><span class="vector-icon mw-ui-icon-search mw-ui-icon-wikimedia-search"></span>

<span>Search</span>
			</button>
		</div>
			
		<div role="search" class="vector-search-box-vue  vector-search-box-show-thumbnail vector-search-box">
			<div class="vector-typeahead-search-container">
				<div class="cdx-typeahead-search cdx-typeahead-search--show-thumbnail">
					<form action="/w/index.php" id="vector-sticky-search-form" class="cdx-search-input cdx-search-input--has-end-button">
						<div  class="cdx-search-input__input-wrapper"  data-search-loc="header-moved">
							<div class="cdx-text-input cdx-text-input--has-start-icon">
								<input
									class="cdx-text-input__input mw-searchInput" autocomplete="off"
									
									type="search" name="search" placeholder="Search Wikipedia">
								<span class="cdx-text-input__icon cdx-text-input__start-icon"></span>
							</div>
							<input type="hidden" name="title" value="Special:Search">
						</div>
						<button class="cdx-button cdx-search-input__end-button">Search</button>
					</form>
				</div>
			</div>
		</div>
		<div class="vector-sticky-header-context-bar">
				<nav aria-label="Contents" class="vector-toc-landmark">
						
					<div id="vector-sticky-header-toc" class="vector-dropdown mw-portlet mw-portlet-sticky-header-toc vector-sticky-header-toc vector-button-flush-left"  >
						<input type="checkbox" id="vector-sticky-header-toc-checkbox" role="button" aria-haspopup="true" data-event-name="ui.dropdown-vector-sticky-header-toc" class="vector-dropdown-checkbox "  aria-label="Toggle the table of contents"  >
						<label id="vector-sticky-header-toc-label" for="vector-sticky-header-toc-checkbox" class="vector-dropdown-label cdx-button cdx-button--fake-button cdx-button--fake-button--enabled cdx-button--weight-quiet cdx-button--icon-only " aria-hidden="true"  ><span class="vector-icon mw-ui-icon-listBullet mw-ui-icon-wikimedia-listBullet"></span>

<span class="vector-dropdown-label-text">Toggle the table of contents</span>
						</label>
						<div class="vector-dropdown-content">
					
						<div id="vector-sticky-header-toc-unpinned-container" class="vector-unpinned-container">
						</div>
					
						</div>
					</div>
			</nav>
				<div class="vector-sticky-header-context-bar-primary" aria-hidden="true" ><span class="mw-page-title-main">Evaluation strategy</span></div>
			</div>
		</div>
		<div class="vector-sticky-header-end" aria-hidden="true">
			<div class="vector-sticky-header-icons">
				<a href="#" class="cdx-button cdx-button--fake-button cdx-button--fake-button--enabled cdx-button--weight-quiet cdx-button--icon-only" id="ca-talk-sticky-header" tabindex="-1" data-event-name="talk-sticky-header"><span class="vector-icon mw-ui-icon-speechBubbles mw-ui-icon-wikimedia-speechBubbles"></span>

<span></span>
			</a>
			<a href="#" class="cdx-button cdx-button--fake-button cdx-button--fake-button--enabled cdx-button--weight-quiet cdx-button--icon-only" id="ca-subject-sticky-header" tabindex="-1" data-event-name="subject-sticky-header"><span class="vector-icon mw-ui-icon-article mw-ui-icon-wikimedia-article"></span>

<span></span>
			</a>
			<a href="#" class="cdx-button cdx-button--fake-button cdx-button--fake-button--enabled cdx-button--weight-quiet cdx-button--icon-only" id="ca-history-sticky-header" tabindex="-1" data-event-name="history-sticky-header"><span class="vector-icon mw-ui-icon-wikimedia-history mw-ui-icon-wikimedia-wikimedia-history"></span>

<span></span>
			</a>
			<a href="#" class="cdx-button cdx-button--fake-button cdx-button--fake-button--enabled cdx-button--weight-quiet cdx-button--icon-only mw-watchlink" id="ca-watchstar-sticky-header" tabindex="-1" data-event-name="watch-sticky-header"><span class="vector-icon mw-ui-icon-wikimedia-star mw-ui-icon-wikimedia-wikimedia-star"></span>

<span></span>
			</a>
			<a href="#" class="cdx-button cdx-button--fake-button cdx-button--fake-button--enabled cdx-button--weight-quiet cdx-button--icon-only" id="ca-edit-sticky-header" tabindex="-1" data-event-name="wikitext-edit-sticky-header"><span class="vector-icon mw-ui-icon-wikimedia-wikiText mw-ui-icon-wikimedia-wikimedia-wikiText"></span>

<span></span>
			</a>
			<a href="#" class="cdx-button cdx-button--fake-button cdx-button--fake-button--enabled cdx-button--weight-quiet cdx-button--icon-only" id="ca-ve-edit-sticky-header" tabindex="-1" data-event-name="ve-edit-sticky-header"><span class="vector-icon mw-ui-icon-wikimedia-edit mw-ui-icon-wikimedia-wikimedia-edit"></span>

<span></span>
			</a>
			<a href="#" class="cdx-button cdx-button--fake-button cdx-button--fake-button--enabled cdx-button--weight-quiet cdx-button--icon-only" id="ca-viewsource-sticky-header" tabindex="-1" data-event-name="ve-edit-protected-sticky-header"><span class="vector-icon mw-ui-icon-wikimedia-editLock mw-ui-icon-wikimedia-wikimedia-editLock"></span>

<span></span>
			</a>
		</div>
			<div class="vector-sticky-header-buttons">
				<button class="cdx-button cdx-button--weight-quiet mw-interlanguage-selector" id="p-lang-btn-sticky-header" tabindex="-1" data-event-name="ui.dropdown-p-lang-btn-sticky-header"><span class="vector-icon mw-ui-icon-wikimedia-language mw-ui-icon-wikimedia-wikimedia-language"></span>

<span>14 languages</span>
			</button>
			<a href="#" class="cdx-button cdx-button--fake-button cdx-button--fake-button--enabled cdx-button--weight-quiet cdx-button--action-progressive" id="ca-addsection-sticky-header" tabindex="-1" data-event-name="addsection-sticky-header"><span class="vector-icon mw-ui-icon-speechBubbleAdd-progressive mw-ui-icon-wikimedia-speechBubbleAdd-progressive"></span>

<span>Add topic</span>
			</a>
		</div>
			<div class="vector-sticky-header-icon-end">
				<div class="vector-user-links">
				</div>
			</div>
		</div>
	</div>
</div>
<div class="mw-portlet mw-portlet-dock-bottom emptyPortlet" id="p-dock-bottom">
	<ul>
		
	</ul>
</div>
<script>(RLQ=window.RLQ||[]).push(function(){mw.config.set({"wgHostname":"mw-web.eqiad.main-7464fb589d-99vbj","wgBackendResponseTime":192,"wgPageParseReport":{"limitreport":{"cputime":"0.996","walltime":"1.208","ppvisitednodes":{"value":4704,"limit":1000000},"revisionsize":{"value":47196,"limit":2097152},"postexpandincludesize":{"value":120357,"limit":2097152},"templateargumentsize":{"value":1097,"limit":2097152},"expansiondepth":{"value":16,"limit":100},"expensivefunctioncount":{"value":30,"limit":500},"unstrip-depth":{"value":1,"limit":20},"unstrip-size":{"value":250292,"limit":5000000},"entityaccesscount":{"value":0,"limit":500},"timingprofile":["100.00% 1088.821      1 -total"," 53.43%  581.775      1 Template:Reflist"," 25.81%  281.038     23 Template:Cite_book"," 17.16%  186.857     25 Template:Cite_web","  8.81%   95.971      1 Template:Evaluation_strategy","  8.68%   94.457      1 Template:Sidebar","  7.36%   80.112      1 Template:Short_description","  5.75%   62.611      1 Template:More_footnotes_needed","  5.25%   57.136      1 Template:Ambox","  5.15%   56.113      6 Template:Cite_journal"]},"scribunto":{"limitreport-timeusage":{"value":"0.690","limit":"10.000"},"limitreport-memusage":{"value":7205998,"limit":52428800}},"cachereport":{"origin":"mw-web.eqiad.main-5f99d748c-9p5rp","timestamp":"20250728151414","ttl":2592000,"transientcontent":false}}});});</script>
<script type="application/ld+json">{"@context":"https:\/\/schema.org","@type":"Article","name":"Evaluation strategy","url":"https:\/\/en.wikipedia.org\/wiki\/Evaluation_strategy#Call_by_need","sameAs":"http:\/\/www.wikidata.org\/entity\/Q2881121","mainEntity":"http:\/\/www.wikidata.org\/entity\/Q2881121","author":{"@type":"Organization","name":"Contributors to Wikimedia projects"},"publisher":{"@type":"Organization","name":"Wikimedia Foundation, Inc.","logo":{"@type":"ImageObject","url":"https:\/\/www.wikimedia.org\/static\/images\/wmf-hor-googpub.png"}},"datePublished":"2005-10-23T06:58:34Z","dateModified":"2025-06-06T20:45:35Z","headline":"strategy used by programming languages to determine two things\u2014when to evaluate the arguments of a function call and what kind of value to pass to the function"}</script>
</body>
</html>